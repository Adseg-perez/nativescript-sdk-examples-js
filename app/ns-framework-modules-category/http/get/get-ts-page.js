//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"get-ts-page.js","sourceRoot":"","sources":["get-ts-page.ts"],"names":[],"mappings":"","sourcesContent":["// const Observable = require(\"tns-core-modules/data/observable\").Observable;\n// const fileSystemModule = require(\"tns-core-modules/file-system\");\n\n// const httpModule = require(\"tns-core-modules/http\");\n\n// function onNavigatingTo(args) {\n//     const page = args.object;\n//     const vm = new Observable();\n\n//     vm.set(\"getStringResultButton\", \"Show getString result\");\n//     vm.set(\"getStringResultVisible\", false);\n\n//     vm.set(\"getJSONResultButton\", \"Show getJSON result\");\n//     vm.set(\"getJSONResultVisible\", false);\n\n//     vm.set(\"getImageResultButton\", \"Show getImage result\");\n//     vm.set(\"getImageResultVisible\", false);\n\n//     vm.set(\"statusCodeResultButton\", \"Show statusCode result\");\n//     vm.set(\"statusCodeResult\", \"\");\n//     vm.set(\"statusCodeResultVisible\", false);\n\n//     vm.set(\"responseHeadersResultButton\", \"Show responseHeaders result\");\n//     vm.set(\"responseHeadersResultVisible\", false);\n\n//     vm.set(\"responseContentResultButton\", \"Show responseContent result\");\n//     vm.set(\"responseContentResultVisible\", false);\n\n//     vm.set(\"getFileResultButton\", \"Show getFile result\");\n//     vm.set(\"getFileResultVisible\", false);\n\n//     vm.set(\"getFileWithPathResultButton\", \"Show getFileWithPath result\");\n//     vm.set(\"getFileWithPathResultVisible\", false);\n\n//     page.bindingContext = vm;\n// }\n\n// function onButtonTap(args) {\n//     const button = args.object;\n//     const page = args.object.page;\n//     const vm = page.bindingContext;\n//     const id = button.get(\"id\");\n//     const status = vm.get(`${id}ResultVisible`);\n\n//     if (!status) {\n//         switch (id) {\n//             case \"getString\":\n//                 getStringExample(vm);\n//                 break;\n//             case \"getJSON\":\n//                 getJSONExample(vm);\n//                 break;\n//             case \"getImage\":\n//                 getImageExample(vm);\n//                 break;\n//             case \"statusCode\":\n//                 getResponseStatusCodeExample(vm);\n//                 break;\n//             case \"responseHeaders\":\n//                 getResponseHeadersExample(vm);\n//                 break;\n//             case \"responseContent\":\n//                 getResponseContentExample(vm);\n//                 break;\n//             case \"getFile\":\n//                 getFileExample(vm);\n//                 break;\n//             case \"getFileWithPath\":\n//                 getFileWithPathExample(vm);\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }\n//     switch (!status) {\n//         case true:\n//                 vm.set(`${id}ResultButton`, `Hide ${id} result`);\n//             break;\n//         case false:\n//                 vm.set(`${id}ResultButton`, `Show ${id} result`);\n//             break;\n//         default:\n//             break;\n//     }\n//     vm.set(`${id}ResultButton`, !status);\n// }\n\n// function getStringExample(viewModel) {\n//     // >> get-string-code\n//     httpModule.getString(\"https://httpbin.org/get\").then((r) => {\n//         viewModel.set(\"getStringResult\", r);\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << get-string-code\n// }\n// function getJSONExample(viewModel) {\n//     // >> get-json-code\n//     httpModule.getJSON(\"https://httpbin.org/get\").then((r) => {\n//         // >> (hide)\n//         viewModel.set(\"host\", r.headers.Host);\n//         viewModel.set(\"userAgent\", r.headers[\"User-Agent\"]);\n//         viewModel.set(\"origin\", r.origin);\n//         viewModel.set(\"url\", r.url);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << get-json-code\n// }\n// function getImageExample(viewModel) {\n//     // >> get-image-code\n//     httpModule.getImage(\"https://httpbin.org/image/jpeg\").then((r) => {\n//         // getImage method returns ImageSource object\n//         // >> (hide)\n//         viewModel.set(\"getImageResult\", r);\n//         viewModel.set(\"imageWidth\", r.width);\n//         viewModel.set(\"imageHeight\", r.height);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << get-image-code\n// }\n\n// function getResponseStatusCodeExample(viewModel) {\n//     // >> request-status-code\n//     httpModule.request({\n//         url: \"https://httpbin.org/get\",\n//         method: \"GET\"\n//     }).then((response) => {\n//         // Argument (response) is HttpResponse\n//         // >> (hide)\n//         const statusCode = response.statusCode;\n//         viewModel.set(\"statusCodeResult\", statusCode);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << request-status-code\n// }\n\n// function getResponseHeadersExample(viewModel) {\n//     console.log(\"getResponseHeadersExample\");\n//     // >> request-response-header\n//     httpModule.request({\n//         url: \"https://httpbin.org/get\",\n//         method: \"GET\"\n//     }).then((response) => {\n//         // Argument (response) is HttpResponse\n//         // >> (hide)\n//         viewModel.set(\"contentType\", response.headers[\"Content-Type\"]);\n//         viewModel.set(\"date\", response.headers.Date);\n//         viewModel.set(\"server\", response.headers.Server);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << request-response-header\n// }\n\n// function getResponseContentExample(viewModel) {\n//     // >> request-response-content\n//     httpModule.request({\n//         url: \"https://httpbin.org/get\",\n//         method: \"GET\"\n//     }).then((response) => {\n//         // Content property of the response is HttpContent\n//         // The toString method allows you to get the response body as string.\n//         const str = response.content.toString();\n//         // >> (hide)\n//         viewModel.set(\"responseContentResult\", str);\n//         // << (hide)\n//         // The toJSON method allows you to parse the received content to JSON object\n//         // var obj = response.content.toJSON();\n//         // The toImage method allows you to get the response body as ImageSource.\n//         // var img = response.content.toImage();\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << request-response-content\n// }\n\n// function getFileExample(viewModel) {\n//     // >> get-file-code\n//     httpModule.getFile(\"https://raw.githubusercontent.com/NativeScript/NativeScript/master/tests/app/logo.png\").then((resultFile) => {\n//         // The returned result will be File object\n//         // >> (hide)\n//         viewModel.set(\"name\", resultFile.name);\n//         viewModel.set(\"extension\", resultFile.extension);\n//         viewModel.set(\"path\", resultFile.path);\n//         viewModel.set(\"getFileResult\", resultFile.path);\n//         viewModel.set(\"getFileImageWidth\", 72);\n//         viewModel.set(\"getFileImageHeight\", 72);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << get-file-code\n// }\n\n// function getFileWithPathExample(viewModel) {\n//     // >> get-file-code-with-path\n//     const filePath = fileSystemModule.path.join(fileSystemModule.knownFolders.currentApp().path, \"test.png\");\n//     httpModule.getFile(\"https://httpbin.org/image/png?testQuery=query&anotherParam=param\", filePath).then((resultFile) => {\n//         // The returned result will be File object\n//         // >> (hide)\n//         viewModel.set(\"name_get_file_with_path\", resultFile.name);\n//         viewModel.set(\"extension_get_file_with_path\", resultFile.extension);\n//         viewModel.set(\"path_get_file_with_path\", resultFile.path);\n//         viewModel.set(\"getFileWithPathResult\", resultFile.path);\n//         viewModel.set(\"getFileWithPathImageWidth\", 100);\n//         viewModel.set(\"getFileWithPathHeight\", 100);\n//         // << (hide)\n//     }, (e) => {\n//         // >> (hide)\n//         console.log(\"Error: \");\n//         console.log(e);\n//         // << (hide)\n//     });\n//     // << get-file-code-with-path\n// }\n\n// exports.onNavigatingTo = onNavigatingTo;\n// exports.onButtonTap = onButtonTap;\n"]}