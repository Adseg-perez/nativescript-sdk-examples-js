"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var connectivity_1 = require("tns-core-modules/connectivity");
function onNavigatedTo(args) {
    var page = args.object;
    var connectionTypeString;
    var myConnectionType = connectivity_1.getConnectionType();
    switch (myConnectionType) {
        case connectivity_1.connectionType.none:
            console.log("No connection");
            connectionTypeString = "No Internet connectivity!";
            break;
        case connectivity_1.connectionType.wifi:
            console.log("WiFi connection");
            connectionTypeString = "WiFI connectivity!";
            break;
        case connectivity_1.connectionType.mobile:
            console.log("Mobile connection");
            connectionTypeString = "Mobile connectivity!";
            break;
        case connectivity_1.connectionType.ethernet:
            console.log("Ethernet connection");
            connectionTypeString = "Ethernet connectivity!";
            break;
        default:
            break;
    }
    connectivity_1.startMonitoring(function (newConnectionType) {
        switch (newConnectionType) {
            case connectivity_1.connectionType.none:
                console.log("Connection type changed to none.");
                break;
            case connectivity_1.connectionType.wifi:
                console.log("Connection type changed to WiFi.");
                break;
            case connectivity_1.connectionType.mobile:
                console.log("Connection type changed to mobile.");
                break;
            case connectivity_1.connectionType.ethernet:
                console.log("Connection type changed to ethernet.");
                break;
            default:
                break;
        }
    });
    connectivity_1.stopMonitoring();
    page.bindingContext = { connectionType: connectionTypeString };
}
exports.onNavigatedTo = onNavigatedTo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDhEQUFrSDtBQUdsSCx1QkFBOEIsSUFBSTtJQUM5QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksb0JBQW9CLENBQUM7SUFJekIsSUFBTSxnQkFBZ0IsR0FBRyxnQ0FBaUIsRUFBRSxDQUFDO0lBRTdDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUN2QixLQUFLLDZCQUFjLENBQUMsSUFBSTtZQUVwQixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRTdCLG9CQUFvQixHQUFHLDJCQUEyQixDQUFDO1lBRW5ELEtBQUssQ0FBQztRQUNWLEtBQUssNkJBQWMsQ0FBQyxJQUFJO1lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUUvQixvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztZQUU1QyxLQUFLLENBQUM7UUFDVixLQUFLLDZCQUFjLENBQUMsTUFBTTtZQUV0QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFFakMsb0JBQW9CLEdBQUcsc0JBQXNCLENBQUM7WUFFOUMsS0FBSyxDQUFDO1FBQ1YsS0FBSyw2QkFBYyxDQUFDLFFBQVE7WUFFeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBRW5DLG9CQUFvQixHQUFHLHdCQUF3QixDQUFDO1lBRWhELEtBQUssQ0FBQztRQVNWO1lBQ0ksS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUlELDhCQUFlLENBQUMsVUFBQyxpQkFBaUI7UUFDOUIsTUFBTSxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssNkJBQWMsQ0FBQyxJQUFJO2dCQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Z0JBQ2hELEtBQUssQ0FBQztZQUNWLEtBQUssNkJBQWMsQ0FBQyxJQUFJO2dCQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Z0JBQ2hELEtBQUssQ0FBQztZQUNWLEtBQUssNkJBQWMsQ0FBQyxNQUFNO2dCQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Z0JBQ2xELEtBQUssQ0FBQztZQUNWLEtBQUssNkJBQWMsQ0FBQyxRQUFRO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7Z0JBQ3BELEtBQUssQ0FBQztZQUtWO2dCQUNJLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUdILDZCQUFjLEVBQUUsQ0FBQztJQUVqQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixFQUFFLENBQUM7QUFDbkUsQ0FBQztBQTlFRCxzQ0E4RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA+PiBjb25uZWN0aXZpdHktcmVxdWlyZS10c1xuaW1wb3J0IHsgY29ubmVjdGlvblR5cGUsIGdldENvbm5lY3Rpb25UeXBlLCBzdGFydE1vbml0b3JpbmcsIHN0b3BNb25pdG9yaW5nIH1mcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9jb25uZWN0aXZpdHlcIjtcbi8vIDw8IGNvbm5lY3Rpdml0eS1yZXF1aXJlLXRzXG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRlZFRvKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3Q7XG4gICAgbGV0IGNvbm5lY3Rpb25UeXBlU3RyaW5nO1xuXG4gICAgLy8gPj4gY29ubmVjdGl2aXR5LXR5cGUtdHNcbiAgICAvLyByZXN1bHQgaXMgQ29ubmVjdGlvblR5cGUgZW51bWVyYXRpb24gKG5vbmUsIHdpZmkgb3IgbW9iaWxlKVxuICAgIGNvbnN0IG15Q29ubmVjdGlvblR5cGUgPSBnZXRDb25uZWN0aW9uVHlwZSgpO1xuXG4gICAgc3dpdGNoIChteUNvbm5lY3Rpb25UeXBlKSB7XG4gICAgICAgIGNhc2UgY29ubmVjdGlvblR5cGUubm9uZTpcbiAgICAgICAgICAgIC8vIERlbm90ZXMgbm8gSW50ZXJuZXQgY29ubmVjdGlvbi5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgIC8vID4+IChoaWRlKVxuICAgICAgICAgICAgY29ubmVjdGlvblR5cGVTdHJpbmcgPSBcIk5vIEludGVybmV0IGNvbm5lY3Rpdml0eSFcIjtcbiAgICAgICAgICAgIC8vIDw8IChoaWRlKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgY29ubmVjdGlvblR5cGUud2lmaTpcbiAgICAgICAgICAgIC8vIERlbm90ZXMgYSBXaUZpIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldpRmkgY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgIC8vID4+IChoaWRlKVxuICAgICAgICAgICAgY29ubmVjdGlvblR5cGVTdHJpbmcgPSBcIldpRkkgY29ubmVjdGl2aXR5IVwiO1xuICAgICAgICAgICAgLy8gPDwgKGhpZGUpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBjb25uZWN0aW9uVHlwZS5tb2JpbGU6XG4gICAgICAgICAgICAvLyBEZW5vdGVzIGEgbW9iaWxlIGNvbm5lY3Rpb24sIGkuZS4gY2VsbHVsYXIgbmV0d29yayBvciBXQU4uXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1vYmlsZSBjb25uZWN0aW9uXCIpO1xuICAgICAgICAgICAgLy8gPj4gKGhpZGUpXG4gICAgICAgICAgICBjb25uZWN0aW9uVHlwZVN0cmluZyA9IFwiTW9iaWxlIGNvbm5lY3Rpdml0eSFcIjtcbiAgICAgICAgICAgIC8vIDw8IChoaWRlKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgY29ubmVjdGlvblR5cGUuZXRoZXJuZXQ6XG4gICAgICAgICAgICAvLyBEZW5vdGVzIGEgZXRoZXJuZXQgY29ubmVjdGlvbi5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXRoZXJuZXQgY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgIC8vID4+IChoaWRlKVxuICAgICAgICAgICAgY29ubmVjdGlvblR5cGVTdHJpbmcgPSBcIkV0aGVybmV0IGNvbm5lY3Rpdml0eSFcIjtcbiAgICAgICAgICAgIC8vIDw8IChoaWRlKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEJsdWV0b290aCBmdW5jdGlvbmFsaXR5IGluIG1hc3RlciBicmFuY2ggKHRvIGJlIHJlbGVhc2VkIHdpdGggNS4wLjApXG4gICAgICAgIC8vIGNhc2UgY29ubmVjdGlvblR5cGUuYmx1ZXRvb3RoOlxuICAgICAgICAvLyAgICAgLy8gRGVub3RlcyBhIGV0aGVybmV0IGNvbm5lY3Rpb24uXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkJsdWV0b290aCBjb25uZWN0aW9uXCIpO1xuICAgICAgICAvLyAgICAgLy8gPj4gKGhpZGUpXG4gICAgICAgIC8vICAgICBjb25uZWN0aW9uVHlwZVN0cmluZyA9IFwiQmx1ZXRvb3RoIGNvbm5lY3Rpdml0eSFcIjtcbiAgICAgICAgLy8gICAgIC8vIDw8IChoaWRlKVxuICAgICAgICAvLyAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gPDwgY29ubmVjdGl2aXR5LXR5cGUtdHNcblxuICAgIC8vID4+IGNvbm5lY3Rpdml0eS1tb25pdG9yaW5nLXRzXG4gICAgc3RhcnRNb25pdG9yaW5nKChuZXdDb25uZWN0aW9uVHlwZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKG5ld0Nvbm5lY3Rpb25UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIGNvbm5lY3Rpb25UeXBlLm5vbmU6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIHR5cGUgY2hhbmdlZCB0byBub25lLlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgY29ubmVjdGlvblR5cGUud2lmaTpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3Rpb24gdHlwZSBjaGFuZ2VkIHRvIFdpRmkuXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjb25uZWN0aW9uVHlwZS5tb2JpbGU6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIHR5cGUgY2hhbmdlZCB0byBtb2JpbGUuXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjb25uZWN0aW9uVHlwZS5ldGhlcm5ldDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3Rpb24gdHlwZSBjaGFuZ2VkIHRvIGV0aGVybmV0LlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIGNhc2UgY29ubmVjdGlvblR5cGUuYmx1ZXRvb3RoOlxuICAgICAgICAgICAgLy8gICAgIC8vIGZlYXR1cmUgY29taW5nIGluIE5hdGl2ZVNjcmlwdCA1LjAuMFxuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGlvbiB0eXBlIGNoYW5nZWQgdG8gYmx1ZXRvb3RoLlwiKTtcbiAgICAgICAgICAgIC8vICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEV4cGxpY2l0bHkgc3RvcHBpbmcgdGhlIG1vbml0b3JpbmdcbiAgICBzdG9wTW9uaXRvcmluZygpO1xuICAgIC8vIDw8IGNvbm5lY3Rpdml0eS1tb25pdG9yaW5nLXRzXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHsgY29ubmVjdGlvblR5cGU6IGNvbm5lY3Rpb25UeXBlU3RyaW5nIH07XG59XG4iXX0=