"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
var dialogs = require("tns-core-modules/ui/dialogs");
var file;
var myFolder;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var documents = file_system_1.knownFolders.documents();
    file = documents.getFile("TestFileName.txt");
    myFolder = documents.getFolder("TestFolderName");
    vm.set("fileName", "TestFileName");
    vm.set("fileSuccessMessage", "");
    vm.set("folderName", "TestFolderName");
    vm.set("folderSuccessMessage", "");
    vm.set("isItemVisible", false);
    vm.set("isFolderItemVisible", false);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onFileRename(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var fileName = vm.get("fileName");
    file.rename(fileName + ".txt")
        .then(function () {
        vm.set("fileSuccessMessage", "File renamed to:  " + fileName + ".txt");
        vm.set("isItemVisible", true);
    }).catch(function (err) {
        console.log("Error: ");
        console.log(err);
        dialogs.alert(err)
            .then(function () {
            console.log("Dialog closed!");
        });
    });
}
exports.onFileRename = onFileRename;
function onFolderRename(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var folderName = vm.get("folderName");
    myFolder.rename(folderName)
        .then(function () {
        vm.set("folderSuccessMessage", "Folder renamed to:  " + folderName);
        vm.set("isFolderItemVisible", true);
    }).catch(function (err) {
        console.log("Error: ");
        console.log(err);
        dialogs.alert(err)
            .then(function () {
            console.log("Dialog closed!");
        });
    });
}
exports.onFolderRename = onFolderRename;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGRhdGUtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE0RDtBQUM1RCw0REFBd0U7QUFDeEUscURBQXVEO0FBR3ZELElBQUksSUFBVSxDQUFDO0FBQ2YsSUFBSSxRQUFnQixDQUFDO0FBQ3JCLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBRTVCLElBQU0sU0FBUyxHQUFXLDBCQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkQsSUFBSSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3QyxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWpELEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QyxFQUFFLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFckMsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQWhCRCx3Q0FnQkM7QUFFRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0MsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUUvQixJQUFNLFFBQVEsR0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLElBQUksQ0FBQyxNQUFNLENBQUksUUFBUSxTQUFNLENBQUM7U0FDekIsSUFBSSxDQUFDO1FBRUYsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSx1QkFBcUIsUUFBUSxTQUFNLENBQUMsQ0FBQztRQUNsRSxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBRVQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ2pCLElBQUksQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBRVgsQ0FBQztBQXBCRCxvQ0FvQkM7QUFFRCx3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBRS9CLElBQU0sVUFBVSxHQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDdEIsSUFBSSxDQUFDO1FBRUYsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSx5QkFBdUIsVUFBWSxDQUFDLENBQUM7UUFDcEUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBRVQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ2pCLElBQUksQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBRVgsQ0FBQztBQXBCRCx3Q0FvQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQge0ZpbGUsIEZvbGRlciwga25vd25Gb2xkZXJzfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9maWxlLXN5c3RlbVwiO1xyXG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2RpYWxvZ3NcIjtcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcclxuXHJcbmxldCBmaWxlOiBGaWxlO1xyXG5sZXQgbXlGb2xkZXI6IEZvbGRlcjtcclxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3Q7XHJcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgY29uc3QgZG9jdW1lbnRzOiBGb2xkZXIgPSBrbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XHJcbiAgICBmaWxlID0gZG9jdW1lbnRzLmdldEZpbGUoXCJUZXN0RmlsZU5hbWUudHh0XCIpO1xyXG4gICAgbXlGb2xkZXIgPSBkb2N1bWVudHMuZ2V0Rm9sZGVyKFwiVGVzdEZvbGRlck5hbWVcIik7XHJcblxyXG4gICAgdm0uc2V0KFwiZmlsZU5hbWVcIiwgXCJUZXN0RmlsZU5hbWVcIik7XHJcbiAgICB2bS5zZXQoXCJmaWxlU3VjY2Vzc01lc3NhZ2VcIiwgXCJcIik7XHJcbiAgICB2bS5zZXQoXCJmb2xkZXJOYW1lXCIsIFwiVGVzdEZvbGRlck5hbWVcIik7XHJcbiAgICB2bS5zZXQoXCJmb2xkZXJTdWNjZXNzTWVzc2FnZVwiLCBcIlwiKTtcclxuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgZmFsc2UpO1xyXG4gICAgdm0uc2V0KFwiaXNGb2xkZXJJdGVtVmlzaWJsZVwiLCBmYWxzZSk7XHJcblxyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25GaWxlUmVuYW1lKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIC8vID4+IGZzLXVwZGF0ZS1yZW5hbWUtZmlsZS1jb2RlLXRzXHJcbiAgICBjb25zdCBmaWxlTmFtZTogc3RyaW5nID0gdm0uZ2V0KFwiZmlsZU5hbWVcIik7XHJcbiAgICBmaWxlLnJlbmFtZShgJHtmaWxlTmFtZX0udHh0YClcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEZpbGUgU3VjY2Vzc2Z1bGx5IFJlbmFtZWQuXHJcbiAgICAgICAgICAgIHZtLnNldChcImZpbGVTdWNjZXNzTWVzc2FnZVwiLCBgRmlsZSByZW5hbWVkIHRvOiAgJHtmaWxlTmFtZX0udHh0YCk7XHJcbiAgICAgICAgICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAvLyBFcnJvciFcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICBkaWFsb2dzLmFsZXJ0KGVycilcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEaWFsb2cgY2xvc2VkIVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyA8PCBmcy11cGRhdGUtcmVuYW1lLWZpbGUtY29kZS10c1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25Gb2xkZXJSZW5hbWUoYXJncykge1xyXG4gICAgY29uc3QgcGFnZTpQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0LnBhZ2U7XHJcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XHJcbiAgICAvLyA+PiBmcy11cGRhdGUtcmVuYW1lLWZvbGRlci1jb2RlLXRzXHJcbiAgICBjb25zdCBmb2xkZXJOYW1lOiBzdHJpbmcgPSB2bS5nZXQoXCJmb2xkZXJOYW1lXCIpO1xyXG4gICAgbXlGb2xkZXIucmVuYW1lKGZvbGRlck5hbWUpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBGb2xkZXIgU3VjY2Vzc2Z1bGx5IFJlbmFtZWQuXHJcbiAgICAgICAgICAgIHZtLnNldChcImZvbGRlclN1Y2Nlc3NNZXNzYWdlXCIsIGBGb2xkZXIgcmVuYW1lZCB0bzogICR7Zm9sZGVyTmFtZX1gKTtcclxuICAgICAgICAgICAgdm0uc2V0KFwiaXNGb2xkZXJJdGVtVmlzaWJsZVwiLCB0cnVlKTtcclxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEVycm9yIVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgIGRpYWxvZ3MuYWxlcnQoZXJyKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIC8vIDw8IGZzLXVwZGF0ZS1yZW5hbWUtZm9sZGVyLWNvZGUtdHNcclxufVxyXG4iXX0=