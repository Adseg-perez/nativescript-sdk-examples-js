"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
var dialogs = require("tns-core-modules/ui/dialogs");
var file;
var myFolder;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var documents = file_system_1.knownFolders.documents();
    file = documents.getFile("TestFileName.txt");
    myFolder = documents.getFolder("TestFolderName");
    vm.set("fileName", "TestFileName");
    vm.set("fileSuccessMessage", "");
    vm.set("folderName", "TestFolderName");
    vm.set("folderSuccessMessage", "");
    vm.set("isItemVisible", false);
    vm.set("isFolderItemVisible", false);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onFileRename(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var fileName = vm.get("fileName");
    file.rename(fileName + ".txt")
        .then(function () {
        vm.set("fileSuccessMessage", "File renamed to:  " + fileName + ".txt");
        vm.set("isItemVisible", true);
    }).catch(function (err) {
        console.log("Error: ");
        console.log(err);
        dialogs.alert(err)
            .then(function () {
            console.log("Dialog closed!");
        });
    });
}
exports.onFileRename = onFileRename;
function onFolderRename(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var folderName = vm.get("folderName");
    myFolder.rename(folderName)
        .then(function () {
        vm.set("folderSuccessMessage", "Folder renamed to:  " + folderName);
        vm.set("isFolderItemVisible", true);
    }).catch(function (err) {
        console.log("Error: ");
        console.log(err);
        dialogs.alert(err)
            .then(function () {
            console.log("Dialog closed!");
        });
    });
}
exports.onFolderRename = onFolderRename;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGRhdGUtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUM5RCw0REFBMEU7QUFDMUUscURBQXVEO0FBR3ZELElBQUksSUFBVSxDQUFDO0FBQ2YsSUFBSSxRQUFnQixDQUFDO0FBQ3JCLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckMsSUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFFNUIsSUFBTSxTQUFTLEdBQVcsMEJBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuRCxJQUFJLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzdDLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFakQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDbkMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZDLEVBQUUsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVyQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBaEJELHdDQWdCQztBQUVELHNCQUE2QixJQUFJO0lBQzdCLElBQU0sSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFFL0IsSUFBTSxRQUFRLEdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFJLFFBQVEsU0FBTSxDQUFDO1NBQ3pCLElBQUksQ0FBQztRQUVGLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsdUJBQXFCLFFBQVEsU0FBTSxDQUFDLENBQUM7UUFDbEUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztRQUVULE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNiLElBQUksQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBRVgsQ0FBQztBQXBCRCxvQ0FvQkM7QUFFRCx3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBRS9CLElBQU0sVUFBVSxHQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDdEIsSUFBSSxDQUFDO1FBRUYsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSx5QkFBdUIsVUFBWSxDQUFDLENBQUM7UUFDcEUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBRVQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ2IsSUFBSSxDQUFDO1lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUM7QUFFWCxDQUFDO0FBcEJELHdDQW9CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IEZpbGUsIEZvbGRlciwga25vd25Gb2xkZXJzIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZmlsZS1zeXN0ZW1cIjtcbmltcG9ydCAqIGFzIGRpYWxvZ3MgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9nc1wiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcblxubGV0IGZpbGU6IEZpbGU7XG5sZXQgbXlGb2xkZXI6IEZvbGRlcjtcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcblxuICAgIGNvbnN0IGRvY3VtZW50czogRm9sZGVyID0ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xuICAgIGZpbGUgPSBkb2N1bWVudHMuZ2V0RmlsZShcIlRlc3RGaWxlTmFtZS50eHRcIik7XG4gICAgbXlGb2xkZXIgPSBkb2N1bWVudHMuZ2V0Rm9sZGVyKFwiVGVzdEZvbGRlck5hbWVcIik7XG5cbiAgICB2bS5zZXQoXCJmaWxlTmFtZVwiLCBcIlRlc3RGaWxlTmFtZVwiKTtcbiAgICB2bS5zZXQoXCJmaWxlU3VjY2Vzc01lc3NhZ2VcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwiZm9sZGVyTmFtZVwiLCBcIlRlc3RGb2xkZXJOYW1lXCIpO1xuICAgIHZtLnNldChcImZvbGRlclN1Y2Nlc3NNZXNzYWdlXCIsIFwiXCIpO1xuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgZmFsc2UpO1xuICAgIHZtLnNldChcImlzRm9sZGVySXRlbVZpc2libGVcIiwgZmFsc2UpO1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25GaWxlUmVuYW1lKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+YXJncy5vYmplY3QucGFnZTtcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XG4gICAgLy8gPj4gZnMtdXBkYXRlLXJlbmFtZS1maWxlLWNvZGUtdHNcbiAgICBjb25zdCBmaWxlTmFtZTogc3RyaW5nID0gdm0uZ2V0KFwiZmlsZU5hbWVcIik7XG4gICAgZmlsZS5yZW5hbWUoYCR7ZmlsZU5hbWV9LnR4dGApXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIEZpbGUgU3VjY2Vzc2Z1bGx5IFJlbmFtZWQuXG4gICAgICAgICAgICB2bS5zZXQoXCJmaWxlU3VjY2Vzc01lc3NhZ2VcIiwgYEZpbGUgcmVuYW1lZCB0bzogICR7ZmlsZU5hbWV9LnR4dGApO1xuICAgICAgICAgICAgdm0uc2V0KFwiaXNJdGVtVmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgLy8gRXJyb3IhXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgZGlhbG9ncy5hbGVydChlcnIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAvLyA8PCBmcy11cGRhdGUtcmVuYW1lLWZpbGUtY29kZS10c1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25Gb2xkZXJSZW5hbWUoYXJncykge1xuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdC5wYWdlO1xuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcbiAgICAvLyA+PiBmcy11cGRhdGUtcmVuYW1lLWZvbGRlci1jb2RlLXRzXG4gICAgY29uc3QgZm9sZGVyTmFtZTogc3RyaW5nID0gdm0uZ2V0KFwiZm9sZGVyTmFtZVwiKTtcbiAgICBteUZvbGRlci5yZW5hbWUoZm9sZGVyTmFtZSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gRm9sZGVyIFN1Y2Nlc3NmdWxseSBSZW5hbWVkLlxuICAgICAgICAgICAgdm0uc2V0KFwiZm9sZGVyU3VjY2Vzc01lc3NhZ2VcIiwgYEZvbGRlciByZW5hbWVkIHRvOiAgJHtmb2xkZXJOYW1lfWApO1xuICAgICAgICAgICAgdm0uc2V0KFwiaXNGb2xkZXJJdGVtVmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgLy8gRXJyb3IhXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgZGlhbG9ncy5hbGVydChlcnIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAvLyA8PCBmcy11cGRhdGUtcmVuYW1lLWZvbGRlci1jb2RlLXRzXG59XG4iXX0=