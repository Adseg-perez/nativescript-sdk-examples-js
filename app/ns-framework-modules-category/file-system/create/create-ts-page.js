"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("folderName", "");
    vm.set("fileName", "");
    vm.set("fileTextContent", "");
    vm.set("isItemVisible", false);
    vm.set("successMessage", "");
    vm.set("writtenContent", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onCreateFile(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var documents = file_system_1.knownFolders.documents();
    var folder = documents.getFolder(vm.get("folderName") || "testFolder");
    var file = folder.getFile("" + (vm.get("fileName") || "testFile") + ".txt");
    file.writeText(vm.get("fileTextContent") || "some random content")
        .then(function () {
        file.readText()
            .then(function (res) {
            vm.set("successMessage", "Successfully saved in" + file.path);
            vm.set("writtenContent", res);
            vm.set("isItemVisible", true);
        });
    }).catch(function (err) {
        console.log(err);
    });
}
exports.onCreateFile = onCreateFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGUtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUc5RCw0REFBd0U7QUFHeEUsd0JBQStCLElBQUk7SUFDL0IsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUU1QixFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRS9CLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUc3QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBZEQsd0NBY0M7QUFFRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0MsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUUvQixJQUFNLFNBQVMsR0FBbUIsMEJBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMzRCxJQUFNLE1BQU0sR0FBb0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxDQUFDO0lBQzFGLElBQU0sSUFBSSxHQUFnQixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBRyxHQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpGLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLHFCQUFxQixDQUFDO1NBQzdELElBQUksQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLEVBQUU7YUFDVixJQUFJLENBQUMsVUFBQyxHQUFHO1lBQ04sRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSwwQkFBd0IsSUFBSSxDQUFDLElBQU0sQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDOUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUVYLENBQUM7QUFwQkQsb0NBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xyXG4vLyA+PiBmcy1jcmVhdGUtaW1wb3J0XHJcbmltcG9ydCB7a25vd25Gb2xkZXJzLCBGb2xkZXIsIEZpbGV9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XHJcbi8vIDw8IGZzLWNyZWF0ZS1pbXBvcnRcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3Q7XHJcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgdm0uc2V0KFwiZm9sZGVyTmFtZVwiLCBcIlwiKTtcclxuICAgIHZtLnNldChcImZpbGVOYW1lXCIsIFwiXCIpO1xyXG4gICAgdm0uc2V0KFwiZmlsZVRleHRDb250ZW50XCIsIFwiXCIpO1xyXG4gICAgdm0uc2V0KFwiaXNJdGVtVmlzaWJsZVwiLCBmYWxzZSk7XHJcblxyXG4gICAgdm0uc2V0KFwic3VjY2Vzc01lc3NhZ2VcIiwgXCJcIik7XHJcbiAgICB2bS5zZXQoXCJ3cml0dGVuQ29udGVudFwiLCBcIlwiKTtcclxuXHJcblxyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25DcmVhdGVGaWxlKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIC8vID4+IGZzLWNyZWF0ZS1hbGwtY29kZS10c1xyXG4gICAgY29uc3QgZG9jdW1lbnRzOkZvbGRlciA9IDxGb2xkZXI+IGtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcclxuICAgIGNvbnN0IGZvbGRlcjogRm9sZGVyID0gPEZvbGRlcj4gZG9jdW1lbnRzLmdldEZvbGRlcih2bS5nZXQoXCJmb2xkZXJOYW1lXCIpIHx8IFwidGVzdEZvbGRlclwiKTtcclxuICAgIGNvbnN0IGZpbGU6IEZpbGUgPSA8RmlsZT4gZm9sZGVyLmdldEZpbGUoYCR7KHZtLmdldChcImZpbGVOYW1lXCIpIHx8IFwidGVzdEZpbGVcIil9YCtgLnR4dGApO1xyXG5cclxuICAgIGZpbGUud3JpdGVUZXh0KHZtLmdldChcImZpbGVUZXh0Q29udGVudFwiKSB8fCBcInNvbWUgcmFuZG9tIGNvbnRlbnRcIilcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGZpbGUucmVhZFRleHQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNldChcInN1Y2Nlc3NNZXNzYWdlXCIsIGBTdWNjZXNzZnVsbHkgc2F2ZWQgaW4ke2ZpbGUucGF0aH1gKTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zZXQoXCJ3cml0dGVuQ29udGVudFwiLCByZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyA8PCBmcy1jcmVhdGUtYWxsLWNvZGUtdHNcclxufVxyXG4iXX0=