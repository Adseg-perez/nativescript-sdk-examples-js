"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("folderName", "");
    vm.set("fileName", "");
    vm.set("fileTextContent", "");
    vm.set("isItemVisible", false);
    vm.set("successMessage", "");
    vm.set("writtenContent", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onCreateFile(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var documents = file_system_1.knownFolders.documents();
    var folder = documents.getFolder(vm.get("folderName") || "testFolder");
    var file = folder.getFile("" + (vm.get("fileName") || "testFile") + ".txt");
    file.writeText(vm.get("fileTextContent") || "some random content")
        .then(function () {
        file.readText()
            .then(function (res) {
            vm.set("successMessage", "Successfully saved in" + file.path);
            vm.set("writtenContent", res);
            vm.set("isItemVisible", true);
        });
    }).catch(function (err) {
        console.log(err);
    });
}
exports.onCreateFile = onCreateFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGUtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUc5RCw0REFBMEU7QUFHMUUsd0JBQStCLElBQUk7SUFDL0IsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUU1QixFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRS9CLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUc3QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBZEQsd0NBY0M7QUFFRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFNLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBRS9CLElBQU0sU0FBUyxHQUFtQiwwQkFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNELElBQU0sTUFBTSxHQUFtQixTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUM7SUFDekYsSUFBTSxJQUFJLEdBQWUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUUxRixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxxQkFBcUIsQ0FBQztTQUM3RCxJQUFJLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxFQUFFO2FBQ1YsSUFBSSxDQUFDLFVBQUMsR0FBRztZQUNOLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsMEJBQXdCLElBQUksQ0FBQyxJQUFNLENBQUMsQ0FBQztZQUM5RCxFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztRQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDLENBQUM7QUFFWCxDQUFDO0FBcEJELG9DQW9CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCI7XG4vLyA+PiBmcy1jcmVhdGUtaW1wb3J0XG5pbXBvcnQgeyBrbm93bkZvbGRlcnMsIEZvbGRlciwgRmlsZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XG4vLyA8PCBmcy1jcmVhdGUtaW1wb3J0XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcblxuICAgIHZtLnNldChcImZvbGRlck5hbWVcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwiZmlsZU5hbWVcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwiZmlsZVRleHRDb250ZW50XCIsIFwiXCIpO1xuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgZmFsc2UpO1xuXG4gICAgdm0uc2V0KFwic3VjY2Vzc01lc3NhZ2VcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwid3JpdHRlbkNvbnRlbnRcIiwgXCJcIik7XG5cblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uQ3JlYXRlRmlsZShhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0LnBhZ2U7XG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xuICAgIC8vID4+IGZzLWNyZWF0ZS1hbGwtY29kZS10c1xuICAgIGNvbnN0IGRvY3VtZW50czogRm9sZGVyID0gPEZvbGRlcj5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XG4gICAgY29uc3QgZm9sZGVyOiBGb2xkZXIgPSA8Rm9sZGVyPmRvY3VtZW50cy5nZXRGb2xkZXIodm0uZ2V0KFwiZm9sZGVyTmFtZVwiKSB8fCBcInRlc3RGb2xkZXJcIik7XG4gICAgY29uc3QgZmlsZTogRmlsZSA9IDxGaWxlPmZvbGRlci5nZXRGaWxlKGAkeyh2bS5nZXQoXCJmaWxlTmFtZVwiKSB8fCBcInRlc3RGaWxlXCIpfWAgKyBgLnR4dGApO1xuXG4gICAgZmlsZS53cml0ZVRleHQodm0uZ2V0KFwiZmlsZVRleHRDb250ZW50XCIpIHx8IFwic29tZSByYW5kb20gY29udGVudFwiKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBmaWxlLnJlYWRUZXh0KClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZtLnNldChcInN1Y2Nlc3NNZXNzYWdlXCIsIGBTdWNjZXNzZnVsbHkgc2F2ZWQgaW4ke2ZpbGUucGF0aH1gKTtcbiAgICAgICAgICAgICAgICAgICAgdm0uc2V0KFwid3JpdHRlbkNvbnRlbnRcIiwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgdm0uc2V0KFwiaXNJdGVtVmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG4gICAgLy8gPDwgZnMtY3JlYXRlLWFsbC1jb2RlLXRzXG59XG4iXX0=