"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var documentsFolder = file_system_1.knownFolders.documents();
    var currentAppFolder = file_system_1.knownFolders.currentApp();
    var tempFolder = file_system_1.knownFolders.temp();
    var testPath = "///test.txt";
    vm.set("documents", file_system_1.path.normalize(documentsFolder.path + testPath));
    vm.set("currentApp", file_system_1.path.normalize(currentAppFolder.path + testPath));
    vm.set("temp", file_system_1.path.normalize(tempFolder.path + testPath));
    documentsFolder = file_system_1.knownFolders.documents();
    var filePath = file_system_1.path.join(documentsFolder.path, "myFiles", "test.txt");
    console.log(filePath);
    var separator = file_system_1.path.separator;
    console.log(separator);
    var folderPath = file_system_1.path.join(file_system_1.knownFolders.documents().path, "music");
    var folder = file_system_1.Folder.fromPath(folderPath);
    console.log(folder);
    vm.set("textContentToBeSaved", "");
    vm.set("savedContent", "");
    vm.set("isContentSaved", false);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onSaveContentToFile(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var documentsFolder = file_system_1.knownFolders.documents();
    var filePath = file_system_1.path.join(documentsFolder.path, "FileFromPath.txt");
    var file = file_system_1.File.fromPath(filePath);
    file.writeText(vm.get("textContentToBeSaved"))
        .then(function (result) {
        file.readText().then(function (res) {
            vm.set("isContentSaved", true);
            vm.set("savedContent", res);
            console.log("File content:  " + res);
        });
    }).catch(function (err) {
        console.log(err.stack);
    });
}
exports.onSaveContentToFile = onSaveContentToFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aHMtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhdGhzLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBNEQ7QUFDNUQsNERBQThFO0FBRTlFLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBRzVCLElBQUksZUFBZSxHQUFvQiwwQkFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hFLElBQU0sZ0JBQWdCLEdBQUcsMEJBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuRCxJQUFNLFVBQVUsR0FBRywwQkFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXZDLElBQU0sUUFBUSxHQUFXLGFBQWEsQ0FBQztJQUV2QyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDckUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsa0JBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDdkUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsa0JBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBSTNELGVBQWUsR0FBWSwwQkFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BELElBQU0sUUFBUSxHQUFXLGtCQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRWhGLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFJdEIsSUFBTSxTQUFTLEdBQUcsa0JBQUksQ0FBQyxTQUFTLENBQUM7SUFFakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUd2QixJQUFNLFVBQVUsR0FBVyxrQkFBSSxDQUFDLElBQUksQ0FBQywwQkFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RSxJQUFNLE1BQU0sR0FBb0Isb0JBQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixFQUFFLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQXZDRCx3Q0F1Q0M7QUFFRCw2QkFBb0MsSUFBSTtJQUNwQyxJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0MsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUUvQixJQUFNLGVBQWUsR0FBb0IsMEJBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsRSxJQUFNLFFBQVEsR0FBVyxrQkFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDN0UsSUFBTSxJQUFJLEdBQVMsa0JBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFHM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDekMsSUFBSSxDQUFDLFVBQUMsTUFBTTtRQUVULElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO1lBRXJCLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBa0IsR0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFWCxDQUFDO0FBdEJELGtEQXNCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7a25vd25Gb2xkZXJzLCBwYXRoLCBGb2xkZXIsIEZpbGV9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XHJcbmltcG9ydCB7UGFnZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiXHJcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0O1xyXG4gICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIC8vID4+IGZzLXBhdGhzLW5vcm1hbGl6ZS1jb2RlLXRzXHJcbiAgICBsZXQgZG9jdW1lbnRzRm9sZGVyOiBGb2xkZXIgPSA8Rm9sZGVyPiBrbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XHJcbiAgICBjb25zdCBjdXJyZW50QXBwRm9sZGVyID0ga25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKTtcclxuICAgIGNvbnN0IHRlbXBGb2xkZXIgPSBrbm93bkZvbGRlcnMudGVtcCgpO1xyXG5cclxuICAgIGNvbnN0IHRlc3RQYXRoOiBzdHJpbmcgPSBcIi8vL3Rlc3QudHh0XCI7XHJcbiAgICAvLyBHZXQgYSBub3JtYWxpemVkIHBhdGggc3VjaCBhcyA8Zm9sZGVyLnBhdGg+L3Rlc3QudHh0IGZyb20gPGZvbGRlci5wYXRoPi8vL3Rlc3QudHh0XHJcbiAgICB2bS5zZXQoXCJkb2N1bWVudHNcIiwgcGF0aC5ub3JtYWxpemUoZG9jdW1lbnRzRm9sZGVyLnBhdGggKyB0ZXN0UGF0aCkpO1xyXG4gICAgdm0uc2V0KFwiY3VycmVudEFwcFwiLCBwYXRoLm5vcm1hbGl6ZShjdXJyZW50QXBwRm9sZGVyLnBhdGggKyB0ZXN0UGF0aCkpO1xyXG4gICAgdm0uc2V0KFwidGVtcFwiLCBwYXRoLm5vcm1hbGl6ZSh0ZW1wRm9sZGVyLnBhdGggKyB0ZXN0UGF0aCkpO1xyXG4gICAgLy8gPDwgZnMtcGF0aHMtbm9ybWFsaXplLWNvZGUtdHNcclxuICAgIC8vID4+IGZzLXBhdGhzLWpvaW4tY29kZS10c1xyXG4gICAgLy8gR2VuZXJhdGUgYSBwYXRoIGxpa2UgPGRvY3VtZW50cy5wYXRoPi9teUZpbGVzL3Rlc3QudHh0XHJcbiAgICBkb2N1bWVudHNGb2xkZXIgPSA8Rm9sZGVyPiBrbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XHJcbiAgICBjb25zdCBmaWxlUGF0aDogc3RyaW5nID0gcGF0aC5qb2luKGRvY3VtZW50c0ZvbGRlci5wYXRoLCBcIm15RmlsZXNcIiwgXCJ0ZXN0LnR4dFwiKTtcclxuICAgIC8vIDw8IGZzLXBhdGhzLWpvaW4tY29kZS10c1xyXG4gICAgY29uc29sZS5sb2coZmlsZVBhdGgpO1xyXG5cclxuICAgIC8vID4+IGZzLXBhdGhzLXNlcGFyYXRvci1jb2RlLXRzXHJcbiAgICAvLyBBbiBPUyBkZXBlbmRlbnQgcGF0aCBzZXBhcmF0b3IsIFwiXFxcIiBvciBcIi9cIi5cclxuICAgIGNvbnN0IHNlcGFyYXRvciA9IHBhdGguc2VwYXJhdG9yO1xyXG4gICAgLy8gPDwgZnMtcGF0aHMtc2VwYXJhdG9yLWNvZGUtdHNcclxuICAgIGNvbnNvbGUubG9nKHNlcGFyYXRvcik7XHJcblxyXG4gICAgLy8gPj4gZnMtcGF0aHMtY3JlYXRlLWZvbGRlci1jb2RlLXRzXHJcbiAgICBjb25zdCBmb2xkZXJQYXRoOiBzdHJpbmcgPSBwYXRoLmpvaW4oa25vd25Gb2xkZXJzLmRvY3VtZW50cygpLnBhdGgsIFwibXVzaWNcIik7XHJcbiAgICBjb25zdCBmb2xkZXI6IEZvbGRlciA9IDxGb2xkZXI+IEZvbGRlci5mcm9tUGF0aChmb2xkZXJQYXRoKTtcclxuICAgIC8vIDw8IGZzLXBhdGhzLWNyZWF0ZS1mb2xkZXItY29kZS10c1xyXG4gICAgY29uc29sZS5sb2coZm9sZGVyKTtcclxuXHJcbiAgICB2bS5zZXQoXCJ0ZXh0Q29udGVudFRvQmVTYXZlZFwiLCBcIlwiKTtcclxuICAgIHZtLnNldChcInNhdmVkQ29udGVudFwiLCBcIlwiKTtcclxuICAgIHZtLnNldChcImlzQ29udGVudFNhdmVkXCIsIGZhbHNlKTtcclxuXHJcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvblNhdmVDb250ZW50VG9GaWxlKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIC8vID4+IGZzLXBhdGhzLWNyZWF0ZS1maWxlLWNvZGUtdHNcclxuICAgIGNvbnN0IGRvY3VtZW50c0ZvbGRlcjogRm9sZGVyID0gPEZvbGRlcj4ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xyXG4gICAgY29uc3QgZmlsZVBhdGg6IHN0cmluZyA9IHBhdGguam9pbihkb2N1bWVudHNGb2xkZXIucGF0aCwgXCJGaWxlRnJvbVBhdGgudHh0XCIpO1xyXG4gICAgY29uc3QgZmlsZTogRmlsZSA9IEZpbGUuZnJvbVBhdGgoZmlsZVBhdGgpO1xyXG5cclxuICAgIC8vIFdyaXRpbmcgdGV4dCB0byB0aGUgZmlsZS5cclxuICAgIGZpbGUud3JpdGVUZXh0KHZtLmdldChcInRleHRDb250ZW50VG9CZVNhdmVkXCIpKVxyXG4gICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgLy8gU3VjY2VlZGVkIHdyaXRpbmcgdG8gdGhlIGZpbGUuXHJcbiAgICAgICAgICAgIGZpbGUucmVhZFRleHQoKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFN1Y2NlZWRlZCByZWFkIGZyb20gZmlsZS5cclxuICAgICAgICAgICAgICAgIHZtLnNldChcImlzQ29udGVudFNhdmVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0KFwic2F2ZWRDb250ZW50XCIsIHJlcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRmlsZSBjb250ZW50OiAgJHtyZXN9YCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLnN0YWNrKTtcclxuICAgICAgICB9KTtcclxuICAgIC8vIDw8IGZzLXBhdGhzLWNyZWF0ZS1maWxlLWNvZGUtdHNcclxufVxyXG4iXX0=