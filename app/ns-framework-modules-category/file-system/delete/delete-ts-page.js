"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var file_system_1 = require("tns-core-modules/file-system");
var file;
var myFolder;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var documents = file_system_1.knownFolders.documents();
    myFolder = documents.getFolder("TestFolderName");
    file = myFolder.getFile("TestFileName.txt");
    vm.set("myFolderPath", myFolder.path);
    vm.set("myFilePath", file.path);
    vm.set("resultMessage", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onDeleteFile(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    if (file) {
        file.remove()
            .then(function (res) {
            vm.set("resultMessage", "File successfully deleted!");
        }).catch(function (err) {
            console.log(err.stack);
        });
    }
    else {
        vm.set("resultMessage", "Already deleted file!");
    }
}
exports.onDeleteFile = onDeleteFile;
function onDeleteFolder(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    if (myFolder) {
        myFolder.remove()
            .then(function (fres) {
            vm.set("resultMessage", "Folder successfully deleted!");
        }).catch(function (err) {
            console.log(err.stack);
        });
    }
    else {
        vm.set("resultMessage", "Already deleted folder!");
    }
}
exports.onDeleteFolder = onDeleteFolder;
function onClearFolder(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    if (myFolder) {
        myFolder.clear()
            .then(function (res) {
            vm.set("resultMessage", "Folder successfully cleared!");
        }).catch(function (err) {
            console.log(err.stack);
        });
    }
    else {
        vm.set("resultMessage", "Cannot clear already deleted folder!");
    }
}
exports.onClearFolder = onClearFolder;
function onReset(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var documents = file_system_1.knownFolders.documents();
    myFolder = documents.getFolder("TestFolderName");
    file = myFolder.getFile("TestFileName.txt");
    vm.set("resultMessage", "Reset");
}
exports.onReset = onReset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWxldGUtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE0RDtBQUM1RCw0REFBd0U7QUFHeEUsSUFBSSxJQUFVLENBQUM7QUFDZixJQUFJLFFBQWdCLENBQUM7QUFDckIsd0JBQStCLElBQUk7SUFDL0IsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdEMsSUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFDNUIsSUFBTSxTQUFTLEdBQW9CLDBCQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUQsUUFBUSxHQUFZLFNBQVMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxJQUFJLEdBQVUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25ELEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQVZELHdDQVVDO0FBRUQsc0JBQTZCLElBQUk7SUFDN0IsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzNDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVQLElBQUksQ0FBQyxNQUFNLEVBQUU7YUFDUixJQUFJLENBQUMsVUFBQyxHQUFHO1lBRU4sRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFWCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JELENBQUM7QUFDTCxDQUFDO0FBaEJELG9DQWdCQztBQUVELHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMzQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFHWCxRQUFRLENBQUMsTUFBTSxFQUFFO2FBQ1osSUFBSSxDQUFDLFVBQUMsSUFBSTtZQUVQLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLDhCQUE4QixDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRVgsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0FBQ0wsQ0FBQztBQWpCRCx3Q0FpQkM7QUFFRCx1QkFBOEIsSUFBSTtJQUM5QixJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0MsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRVgsUUFBUSxDQUFDLEtBQUssRUFBRTthQUNYLElBQUksQ0FBQyxVQUFDLEdBQUc7WUFFTixFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUVYLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLHNDQUFzQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztBQUNMLENBQUM7QUFoQkQsc0NBZ0JDO0FBRUQsaUJBQXdCLElBQUk7SUFDeEIsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzNDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsSUFBTSxTQUFTLEdBQW9CLDBCQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUQsUUFBUSxHQUFZLFNBQVMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxJQUFJLEdBQVUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25ELEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFQRCwwQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7a25vd25Gb2xkZXJzLCBGaWxlLCBGb2xkZXJ9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XHJcbmltcG9ydCB7UGFnZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xyXG5cclxubGV0IGZpbGU6IEZpbGU7XHJcbmxldCBteUZvbGRlcjogRm9sZGVyO1xyXG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJncykge1xyXG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiBhcmdzLm9iamVjdDtcclxuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcclxuICAgIGNvbnN0IGRvY3VtZW50czogRm9sZGVyID0gPEZvbGRlcj4ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xyXG4gICAgbXlGb2xkZXIgPSA8Rm9sZGVyPiBkb2N1bWVudHMuZ2V0Rm9sZGVyKFwiVGVzdEZvbGRlck5hbWVcIik7XHJcbiAgICBmaWxlID0gPEZpbGU+IG15Rm9sZGVyLmdldEZpbGUoXCJUZXN0RmlsZU5hbWUudHh0XCIpO1xyXG4gICAgdm0uc2V0KFwibXlGb2xkZXJQYXRoXCIsIG15Rm9sZGVyLnBhdGgpO1xyXG4gICAgdm0uc2V0KFwibXlGaWxlUGF0aFwiLCBmaWxlLnBhdGgpO1xyXG4gICAgdm0uc2V0KFwicmVzdWx0TWVzc2FnZVwiLCBcIlwiKTtcclxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRGVsZXRlRmlsZShhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0LnBhZ2U7XHJcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XHJcbiAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgIC8vID4+IGZzLWRlbGV0ZS1maWxlLWNvZGUtdHNcclxuICAgICAgICBmaWxlLnJlbW92ZSgpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3MgcmVtb3ZpbmcgdGhlIGZpbGUuXHJcbiAgICAgICAgICAgICAgICB2bS5zZXQoXCJyZXN1bHRNZXNzYWdlXCIsIFwiRmlsZSBzdWNjZXNzZnVsbHkgZGVsZXRlZCFcIik7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vIDw8IGZzLWRlbGV0ZS1maWxlLWNvZGUtdHNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0uc2V0KFwicmVzdWx0TWVzc2FnZVwiLCBcIkFscmVhZHkgZGVsZXRlZCBmaWxlIVwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRGVsZXRlRm9sZGVyKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIGlmIChteUZvbGRlcikge1xyXG4gICAgICAgIC8vID4+IGZzLWRlbGV0ZS1mb2xkZXItY29kZS10c1xyXG4gICAgICAgIC8vIFJlbW92ZSBhIGZvbGRlciBhbmQgcmVjdXJzaXZlbHkgaXRzIGNvbnRlbnQuXHJcbiAgICAgICAgbXlGb2xkZXIucmVtb3ZlKClcclxuICAgICAgICAgICAgLnRoZW4oKGZyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3MgcmVtb3ZpbmcgdGhlIGZvbGRlci5cclxuICAgICAgICAgICAgICAgIHZtLnNldChcInJlc3VsdE1lc3NhZ2VcIiwgXCJGb2xkZXIgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQhXCIpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAvLyA8PCBmcy1kZWxldGUtZm9sZGVyLWNvZGUtdHNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0uc2V0KFwicmVzdWx0TWVzc2FnZVwiLCBcIkFscmVhZHkgZGVsZXRlZCBmb2xkZXIhXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25DbGVhckZvbGRlcihhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0LnBhZ2U7XHJcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XHJcbiAgICBpZiAobXlGb2xkZXIpIHtcclxuICAgICAgICAvLyA+PiBmcy1jbGVhci1mb2xkZXItY29kZS10c1xyXG4gICAgICAgIG15Rm9sZGVyLmNsZWFyKClcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bGx5IGNsZWFyZWQgdGhlIGZvbGRlci5cclxuICAgICAgICAgICAgICAgIHZtLnNldChcInJlc3VsdE1lc3NhZ2VcIiwgXCJGb2xkZXIgc3VjY2Vzc2Z1bGx5IGNsZWFyZWQhXCIpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAvLyA8PCBmcy1jbGVhci1mb2xkZXItY29kZS10c1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2bS5zZXQoXCJyZXN1bHRNZXNzYWdlXCIsIFwiQ2Fubm90IGNsZWFyIGFscmVhZHkgZGVsZXRlZCBmb2xkZXIhXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25SZXNldChhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0LnBhZ2U7XHJcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XHJcbiAgICBjb25zdCBkb2N1bWVudHM6IEZvbGRlciA9IDxGb2xkZXI+IGtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcclxuICAgIG15Rm9sZGVyID0gPEZvbGRlcj4gZG9jdW1lbnRzLmdldEZvbGRlcihcIlRlc3RGb2xkZXJOYW1lXCIpO1xyXG4gICAgZmlsZSA9IDxGaWxlPiBteUZvbGRlci5nZXRGaWxlKFwiVGVzdEZpbGVOYW1lLnR4dFwiKTtcclxuICAgIHZtLnNldChcInJlc3VsdE1lc3NhZ2VcIiwgXCJSZXNldFwiKTtcclxufVxyXG5cclxuIl19