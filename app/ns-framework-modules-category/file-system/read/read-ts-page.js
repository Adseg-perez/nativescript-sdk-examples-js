//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC10cy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVhZC10cy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBPYnNlcnZhYmxlID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCIpLk9ic2VydmFibGU7XG4vLyBjb25zdCBPYnNlcnZhYmxlQXJyYXkgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUtYXJyYXlcIikuT2JzZXJ2YWJsZUFycmF5O1xuLy8gY29uc3QgZmlsZVN5c3RlbU1vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCIpO1xuLy8gY29uc3QgaW1hZ2VTb3VyY2VNb2R1bGUgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9pbWFnZS1zb3VyY2VcIik7XG5cbi8vIGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbi8vICAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3Q7XG4vLyAgICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuLy8gICAgIGNvbnN0IGFycmF5ID0gbmV3IE9ic2VydmFibGVBcnJheSgpO1xuLy8gICAgIGNvbnN0IGZvbGRlck5hbWUgPSBcIk5hdGl2ZVNjcmlwdFwiO1xuLy8gICAgIGNvbnN0IGZpbGVOYW1lID0gXCJSRUFETUUudHh0XCI7XG4vLyAgICAgY29uc3QgZmlsZVRleHRDb250ZW50ID0gXCJCdWlsZCBhbWF6aW5nIGlPUyBhbmQgQW5kcm9pZCBhcHBzIHdpdGggdGVjaG5vbG9neSB5b3UgYWxyZWFkeSBrbm93XCIgK1xuLy8gICAgICAgICBcIk9wZW4gc291cmNlIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgdHJ1bHkgbmF0aXZlIG1vYmlsZSBhcHBzXCIgK1xuLy8gICAgICAgICBcIndpdGggQW5ndWxhciwgVHlwZVNjcmlwdCBvciBKYXZhU2NyaXB0LlwiO1xuXG4vLyAgICAgbGV0IGRvY3VtZW50cyA9IGZpbGVTeXN0ZW1Nb2R1bGUua25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xuLy8gICAgIGNvbnN0IGZvbGRlciA9IGRvY3VtZW50cy5nZXRGb2xkZXIoZm9sZGVyTmFtZSk7XG4vLyAgICAgY29uc3QgZmlsZSA9IGZvbGRlci5nZXRGaWxlKGZpbGVOYW1lKTtcblxuLy8gICAgIGZpbGUud3JpdGVUZXh0KGZpbGVUZXh0Q29udGVudClcbi8vICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuLy8gICAgICAgICAgICAgLy8gPj4gZnMtcmVhZC10ZXh0LWNvZGVcbi8vICAgICAgICAgICAgIGZpbGUucmVhZFRleHQoKVxuLy8gICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgdm0uc2V0KFwid3JpdHRlbkNvbnRlbnRcIiwgcmVzKTtcbi8vICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG4vLyAgICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgICAvLyA8PCBmcy1yZWFkLXRleHQtY29kZVxuLy8gICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuLy8gICAgICAgICB9KTtcblxuLy8gICAgIC8vID4+IGZzLWZvbGRlci1jb250ZW50LWNvZGVcbi8vICAgICBkb2N1bWVudHMgPSBmaWxlU3lzdGVtTW9kdWxlLmtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcbi8vICAgICBkb2N1bWVudHMuZ2V0RW50aXRpZXMoKVxuLy8gICAgICAgICAudGhlbigoZW50aXRpZXMpID0+IHtcbi8vICAgICAgICAgICAgIC8vIGVudGl0aWVzIGlzIGFycmF5IHdpdGggdGhlIGRvY3VtZW50J3MgZmlsZXMgYW5kIGZvbGRlcnMuXG4vLyAgICAgICAgICAgICBlbnRpdGllcy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbi8vICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKFxuLy8gICAgICAgICAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbnRpdHkubmFtZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGVudGl0eS5wYXRoLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBlbnRpdHkubGFzdE1vZGlmaWVkLnRvU3RyaW5nKClcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuLy8gICAgICAgICAgICAgLy8gRmFpbGVkIHRvIG9idGFpbiBmb2xkZXIncyBjb250ZW50cy5cbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIC8vIDw8IGZzLWZvbGRlci1jb250ZW50LWNvZGVcbi8vICAgICAvLyA+PiBmcy1maWxlLWV4aXN0cy1jaGVjay1jb2RlXG4vLyAgICAgZG9jdW1lbnRzID0gZmlsZVN5c3RlbU1vZHVsZS5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XG4vLyAgICAgY29uc3QgcGF0aCA9IGZpbGVTeXN0ZW1Nb2R1bGUucGF0aC5qb2luKGRvY3VtZW50cy5wYXRoLCBcIlRleHQudHh0XCIpO1xuLy8gICAgIGNvbnN0IGV4aXN0cyA9IGZpbGVTeXN0ZW1Nb2R1bGUuRmlsZS5leGlzdHMocGF0aCk7XG4vLyAgICAgY29uc29sZS5sb2coYERvZXMgVGV4dC50eHQgZXhpc3RzOiAke2V4aXN0c31gKTtcbi8vICAgICAvLyA8PCBmcy1maWxlLWV4aXN0cy1jaGVjay1jb2RlXG4vLyAgICAgLy8gPj4gZnMtZm9sZGVyLWV4aXN0cy1jaGVjay1jb2RlXG4vLyAgICAgY29uc3QgdGVtcCA9IGZpbGVTeXN0ZW1Nb2R1bGUua25vd25Gb2xkZXJzLnRlbXAoKTtcbi8vICAgICBjb25zdCB0ZW1wRXhpc3RzID0gZmlsZVN5c3RlbU1vZHVsZS5Gb2xkZXIuZXhpc3RzKHRlbXAucGF0aCk7XG4vLyAgICAgY29uc29sZS5sb2coYERvZXMgdGVtcCBmb2xkZXIgZXhpc3RzOiAke3RlbXBFeGlzdHN9YCk7XG4vLyAgICAgLy8gPDwgZnMtZm9sZGVyLWV4aXN0cy1jaGVjay1jb2RlXG5cbi8vICAgICB2bS5zZXQoXCJmaWxlUGF0aFwiLCBmaWxlLnBhdGgpO1xuLy8gICAgIHZtLnNldChcImZvbGRlckVudGl0aWVzXCIsIGFycmF5KTtcbi8vICAgICB2bS5zZXQoXCJiaW5hcnlTb3VyY2VcIiwgXCJcIik7XG5cbi8vICAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG4vLyB9XG5cbi8vIGZ1bmN0aW9uIG9uUmVhZFN5bmMoYXJncykge1xuLy8gICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdC5wYWdlO1xuLy8gICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcbi8vICAgICAvLyA+PiBmcy1yZWFkLXN5bmMtY29kZVxuLy8gICAgIGNvbnN0IGltYWdlID0gaW1hZ2VTb3VyY2VNb2R1bGUuZnJvbVJlc291cmNlKFwiaWNvblwiKTtcbi8vICAgICBjb25zdCBmb2xkZXIgPSBmaWxlU3lzdGVtTW9kdWxlLmtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcbi8vICAgICBjb25zdCBwYXRoID0gZmlsZVN5c3RlbU1vZHVsZS5wYXRoLmpvaW4oZm9sZGVyLnBhdGgsIFwiVGVzdC5wbmdcIik7XG4vLyAgICAgY29uc3Qgc2F2ZWQgPSBpbWFnZS5zYXZlVG9GaWxlKHBhdGgsIFwicG5nXCIpO1xuXG4vLyAgICAgaWYgKHNhdmVkKSB7XG4vLyAgICAgICAgIGNvbnN0IGltYWdlRmlsZSA9IGZpbGVTeXN0ZW1Nb2R1bGUuRmlsZS5mcm9tUGF0aChwYXRoKTtcbi8vICAgICAgICAgY29uc3QgYmluYXJ5U291cmNlID0gaW1hZ2VGaWxlLnJlYWRTeW5jKChlcnIpID0+IHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmJpbmFyeVNvdXJjZSk7XG4vLyAgICAgICAgIC8vIDw8IGZzLXJlYWQtc3luYy1jb2RlXG4vLyAgICAgICAgIC8vID4+IGZzLXdyaXRlLXN5bmMtY29kZVxuLy8gICAgICAgICBpbWFnZUZpbGUud3JpdGVTeW5jKGJpbmFyeVNvdXJjZSwgKGVycikgPT4ge1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICAgIC8vIDw8IGZzLXdyaXRlLXN5bmMtY29kZVxuLy8gICAgICAgICB2bS5zZXQoXCJiaW5hcnlTb3VyY2VcIiwgYFN1Y2Nlc3NmdWxseSByZWFkIGJpbmFyeSBkYXRhOiAke2JpbmFyeVNvdXJjZX1gKTtcbi8vICAgICB9XG4vLyB9XG4vLyBleHBvcnRzLm9uTmF2aWdhdGluZ1RvID0gb25OYXZpZ2F0aW5nVG87XG4vLyBleHBvcnRzLm9uUmVhZFN5bmMgPSBvblJlYWRTeW5jO1xuIl19