"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var dialogs = require("tns-core-modules/ui/dialogs");
var platform_1 = require("tns-core-modules/platform");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("deviceInformationmodel", platform_1.device.model);
    vm.set("deviceInformationdeviceType", platform_1.device.deviceType);
    vm.set("deviceInformationos", platform_1.device.os);
    vm.set("deviceInformationosVersion", platform_1.device.osVersion);
    vm.set("deviceInformationsdkVersion", platform_1.device.sdkVersion);
    vm.set("deviceInformationlanguage", platform_1.device.language);
    vm.set("deviceInformationmanufacturer", platform_1.device.manufacturer);
    vm.set("deviceInformationuuid", platform_1.device.uuid);
    vm.set("screenInformationheightDIPs", platform_1.screen.mainScreen.heightDIPs);
    vm.set("screenInformationheightPixels", platform_1.screen.mainScreen.heightPixels);
    vm.set("screenInformationscale", platform_1.screen.mainScreen.scale);
    vm.set("screenInformationwidthDIPs", platform_1.screen.mainScreen.widthDIPs);
    vm.set("screenInformationwidthPixels", platform_1.screen.mainScreen.widthPixels);
    vm.set("deviceInfoButton", "Show device info");
    vm.set("screenInfoButton", "Show screen info");
    vm.set("isItemVisible", false);
    vm.set("isItemVisibleScreenInfo", false);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function checkPlatformType(args) {
    var message = "";
    if (platform_1.isAndroid) {
        message = "You are using Android device";
    }
    else if (platform_1.isIOS) {
        message = "You are using IOS device";
    }
    dialogs.alert(message)
        .then(function () {
        console.log("Dialog closed!");
    });
}
exports.checkPlatformType = checkPlatformType;
function deviceInfo(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var isItemVisible = vm.get("isItemVisible");
    if (isItemVisible) {
        vm.set("deviceInfoButton", "Show device info");
    }
    else {
        vm.set("deviceInfoButton", "Hide device info");
    }
    vm.set("isItemVisible", !isItemVisible);
}
exports.deviceInfo = deviceInfo;
function screenInfo(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var isItemVisibleScreenInfo = vm.get("isItemVisibleScreenInfo");
    if (isItemVisibleScreenInfo) {
        vm.set("screenInfoButton", "Show screen info");
    }
    else {
        vm.set("screenInfoButton", "Hide screen info");
    }
    vm.set("isItemVisibleScreenInfo", !isItemVisibleScreenInfo);
}
exports.screenInfo = screenInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUM5RCxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUd2RCxzREFBNkU7QUFJN0Usd0JBQStCLElBQUk7SUFDL0IsSUFBTSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUM1QixFQUFFLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLGlCQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsRUFBRSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxpQkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsaUJBQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLGlCQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsRUFBRSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxpQkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELEVBQUUsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsaUJBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxFQUFFLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFFLGlCQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0QsRUFBRSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxpQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLEVBQUUsQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsaUJBQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEUsRUFBRSxDQUFDLEdBQUcsQ0FBQywr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eyBPYnNlcnZhYmxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XG5jb25zdCBkaWFsb2dzID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9nc1wiKTtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCI7XG4vLyA+PiBpbXBvcnQtcGxhdGZvcm1cbmltcG9ydCB7IGRldmljZSwgc2NyZWVuLCBpc0FuZHJvaWQsIGlzSU9TIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIjtcbi8vIDw8IGltcG9ydC1wbGF0Zm9ybVxuXG4vLyA+PiBnZXQtc2NyZWVuLWRldmljZS1pbmZvLXRzXG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJncykge1xuICAgIGNvbnN0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgdm0uc2V0KFwiZGV2aWNlSW5mb3JtYXRpb25tb2RlbFwiLCBkZXZpY2UubW9kZWwpO1xuICAgIHZtLnNldChcImRldmljZUluZm9ybWF0aW9uZGV2aWNlVHlwZVwiLCBkZXZpY2UuZGV2aWNlVHlwZSk7XG4gICAgdm0uc2V0KFwiZGV2aWNlSW5mb3JtYXRpb25vc1wiLCBkZXZpY2Uub3MpO1xuICAgIHZtLnNldChcImRldmljZUluZm9ybWF0aW9ub3NWZXJzaW9uXCIsIGRldmljZS5vc1ZlcnNpb24pO1xuICAgIHZtLnNldChcImRldmljZUluZm9ybWF0aW9uc2RrVmVyc2lvblwiLCBkZXZpY2Uuc2RrVmVyc2lvbik7XG4gICAgdm0uc2V0KFwiZGV2aWNlSW5mb3JtYXRpb25sYW5ndWFnZVwiLCBkZXZpY2UubGFuZ3VhZ2UpO1xuICAgIHZtLnNldChcImRldmljZUluZm9ybWF0aW9ubWFudWZhY3R1cmVyXCIsIGRldmljZS5tYW51ZmFjdHVyZXIpO1xuICAgIHZtLnNldChcImRldmljZUluZm9ybWF0aW9udXVpZFwiLCBkZXZpY2UudXVpZCk7XG4gICAgdm0uc2V0KFwic2NyZWVuSW5mb3JtYXRpb25oZWlnaHRESVBzXCIsIHNjcmVlbi5tYWluU2NyZWVuLmhlaWdodERJUHMpO1xuICAgIHZtLnNldChcInNjcmVlbkluZm9ybWF0aW9uaGVpZ2h0UGl4ZWxzXCIsIHNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyk7XG4gICAgdm0uc2V0KFwic2NyZWVuSW5mb3JtYXRpb25zY2FsZVwiLCBzY3JlZW4ubWFpblNjcmVlbi5zY2FsZSk7XG4gICAgdm0uc2V0KFwic2NyZWVuSW5mb3JtYXRpb253aWR0aERJUHNcIiwgc2NyZWVuLm1haW5TY3JlZW4ud2lkdGhESVBzKTtcbiAgICB2bS5zZXQoXCJzY3JlZW5JbmZvcm1hdGlvbndpZHRoUGl4ZWxzXCIsIHNjcmVlbi5tYWluU2NyZWVuLndpZHRoUGl4ZWxzKTtcblxuICAgIHZtLnNldChcImRldmljZUluZm9CdXR0b25cIiwgXCJTaG93IGRldmljZSBpbmZvXCIpO1xuICAgIHZtLnNldChcInNjcmVlbkluZm9CdXR0b25cIiwgXCJTaG93IHNjcmVlbiBpbmZvXCIpO1xuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgZmFsc2UpO1xuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVTY3JlZW5JbmZvXCIsIGZhbHNlKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUGxhdGZvcm1UeXBlKGFyZ3MpIHtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgaWYgKGlzQW5kcm9pZCkge1xuICAgICAgICBtZXNzYWdlID0gXCJZb3UgYXJlIHVzaW5nIEFuZHJvaWQgZGV2aWNlXCI7XG4gICAgfSBlbHNlIGlmIChpc0lPUykge1xuICAgICAgICBtZXNzYWdlID0gXCJZb3UgYXJlIHVzaW5nIElPUyBkZXZpY2VcIjtcbiAgICB9XG4gICAgZGlhbG9ncy5hbGVydChtZXNzYWdlKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xuICAgICAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldmljZUluZm8oYXJncykge1xuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdC5wYWdlO1xuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcbiAgICBjb25zdCBpc0l0ZW1WaXNpYmxlID0gdm0uZ2V0KFwiaXNJdGVtVmlzaWJsZVwiKTtcbiAgICBpZiAoaXNJdGVtVmlzaWJsZSkge1xuICAgICAgICB2bS5zZXQoXCJkZXZpY2VJbmZvQnV0dG9uXCIsIFwiU2hvdyBkZXZpY2UgaW5mb1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2bS5zZXQoXCJkZXZpY2VJbmZvQnV0dG9uXCIsIFwiSGlkZSBkZXZpY2UgaW5mb1wiKTtcbiAgICB9XG4gICAgdm0uc2V0KFwiaXNJdGVtVmlzaWJsZVwiLCAhaXNJdGVtVmlzaWJsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JlZW5JbmZvKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+YXJncy5vYmplY3QucGFnZTtcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XG4gICAgY29uc3QgaXNJdGVtVmlzaWJsZVNjcmVlbkluZm8gPSB2bS5nZXQoXCJpc0l0ZW1WaXNpYmxlU2NyZWVuSW5mb1wiKTtcbiAgICBpZiAoaXNJdGVtVmlzaWJsZVNjcmVlbkluZm8pIHtcbiAgICAgICAgdm0uc2V0KFwic2NyZWVuSW5mb0J1dHRvblwiLCBcIlNob3cgc2NyZWVuIGluZm9cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdm0uc2V0KFwic2NyZWVuSW5mb0J1dHRvblwiLCBcIkhpZGUgc2NyZWVuIGluZm9cIik7XG4gICAgfVxuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVTY3JlZW5JbmZvXCIsICFpc0l0ZW1WaXNpYmxlU2NyZWVuSW5mbyk7XG59XG4vLyA8PCBnZXQtc2NyZWVuLWRldmljZS1pbmZvLXRzXG4iXX0=