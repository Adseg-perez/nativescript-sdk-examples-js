"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
function onNavigatedTo(data) {
    console.log("onNavigatedTo BASICS");
    var viewModel = new observable_1.Observable();
    viewModel.set("clientName", "Jonh Doe");
    viewModel.set("mySize", 24);
    viewModel.set("isVisible", true);
    viewModel.set("onLabelTap", function (args) {
        console.log("Tapped on", args.object);
        console.log("Name: ", args.object.text);
    });
    console.log(viewModel.get("clientName"));
    console.log(viewModel.get("mySize"));
    console.log(viewModel.get("isVisible"));
    var view = data.object;
    view.bindingContext = viewModel;
    var newViewModel = observable_1.fromObject({ "myColor": "Lightgray" });
    var nestedViewModel = observable_1.fromObjectRecursive({
        client: "John Doe",
        favoriteColor: { hisColor: "Green" }
    });
    var myListener = viewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
        console.log("propertyChangeEvent [eventName]: ", args.eventName);
        console.log("propertyChangeEvent [propertyName]: ", args.propertyName);
        console.log("propertyChangeEvent [value]: ", args.value);
        console.log("propertyChangeEvent [oldValue]: ", args.oldValue);
    });
}
exports.onNavigatedTo = onNavigatedTo;
function removeListener() {
    var viewModel = new observable_1.Observable();
    var myListener = viewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
    });
    viewModel.removeEventListener(observable_1.Observable.propertyChangeEvent, myListener);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtEQUFtSDtBQUduSCx1QkFBOEIsSUFBbUI7SUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBR3BDLElBQU0sU0FBUyxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBR25DLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBR3hDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRzVCLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBR2pDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQUMsSUFBSTtRQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUdILE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBR3hDLElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7SUFLaEMsSUFBTSxZQUFZLEdBQUcsdUJBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBVTVELElBQU0sZUFBZSxHQUFHLGdDQUFtQixDQUFDO1FBQ3hDLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLGFBQWEsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7S0FDdkMsQ0FBQyxDQUFDO0lBVUgsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDLHVCQUFVLENBQUMsbUJBQW1CLEVBQUUsVUFBQyxJQUF3QjtRQUVuRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUM7QUFqRUQsc0NBaUVDO0FBR0Q7SUFDSSxJQUFJLFNBQVMsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUNqQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsdUJBQVUsQ0FBQyxtQkFBbUIsRUFBRSxVQUFDLElBQXdCO0lBRXZHLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLG1CQUFtQixDQUFDLHVCQUFVLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFOUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdmlnYXRlZERhdGEsIFBhZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCI7XG4vLyA+PiBvYnNlcnZhYmxlLWJhc2ljcy1pbXBvcnRzLXRzXG5pbXBvcnQgeyBmcm9tT2JqZWN0LCBmcm9tT2JqZWN0UmVjdXJzaXZlLCBPYnNlcnZhYmxlLCBQcm9wZXJ0eUNoYW5nZURhdGEgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbi8vIDw8IG9ic2VydmFibGUtYmFzaWNzLWltcG9ydHMtdHNcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGVkVG8oZGF0YTogTmF2aWdhdGVkRGF0YSkge1xuICAgIGNvbnNvbGUubG9nKFwib25OYXZpZ2F0ZWRUbyBCQVNJQ1NcIik7XG4gICAgLy8gPj4gb2JzZXJ2YWJsZS1jbGFzcy10c1xuICAgIC8vIGNyZWF0aW5nIGFuIE9ic2VydmFibGUgYW5kIHNldHRpbmcgdGl0bGUgcHJvcGVydHUgd2l0aCBhIHN0cmluZyB2YWx1ZVxuICAgIGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBPYnNlcnZhYmxlKCk7XG5cbiAgICAvLyBTdHJpbmcgYmluZGluZyB1c2luZyBzZXQgd2l0aCBrZXktdmFsdWVcbiAgICB2aWV3TW9kZWwuc2V0KFwiY2xpZW50TmFtZVwiLCBcIkpvbmggRG9lXCIpO1xuXG4gICAgLy8gTnVtYmVyIGJpbmRpbmcgdXNpbmcgc2V0IHdpdGgga2V5LXZhbHVlXG4gICAgdmlld01vZGVsLnNldChcIm15U2l6ZVwiLCAyNCk7XG5cbiAgICAvLyBCb29sZWFuIGJpbmRpbmcgdXNpbmcgc2V0IHdpdGgga2V5LXZhbHVlXG4gICAgdmlld01vZGVsLnNldChcImlzVmlzaWJsZVwiLCB0cnVlKTtcblxuICAgIC8vIEJpbmRpbmcgZXZlbnQgY2FsbGJhY2sgdXNpbmcgc2V0IHdpdGgga2V5LXZhbHVlXG4gICAgdmlld01vZGVsLnNldChcIm9uTGFiZWxUYXBcIiwgKGFyZ3MpID0+IHtcbiAgICAgICAgLy8gYXJncyBpcyBvZiB0eXBlIEV2ZW50RGF0YVxuICAgICAgICBjb25zb2xlLmxvZyhcIlRhcHBlZCBvblwiLCBhcmdzLm9iamVjdCk7IC8vIDxMYWJlbD5cbiAgICAgICAgY29uc29sZS5sb2coXCJOYW1lOiBcIiwgYXJncy5vYmplY3QudGV4dCk7IC8vIFRoZSB0ZXh0IHZhbHVlXG4gICAgfSk7XG5cbiAgICAvLyB1c2luZyBnZXQgdG8gb2J0YWluIHRoZSB2YWx1ZSBvZiBzcGVjaWZpYyBrZXlcbiAgICBjb25zb2xlLmxvZyh2aWV3TW9kZWwuZ2V0KFwiY2xpZW50TmFtZVwiKSk7IC8vIEpvbmggRG9lXG4gICAgY29uc29sZS5sb2codmlld01vZGVsLmdldChcIm15U2l6ZVwiKSk7IC8vIDQyXG4gICAgY29uc29sZS5sb2codmlld01vZGVsLmdldChcImlzVmlzaWJsZVwiKSk7IC8vIHRydWVcblxuICAgIC8vIGJpbmQgdGhlIHZpZXctbW9kZWwgdG8gdGhlIHZpZXcncyBiaW5kaW5nQ29udGV4dCBwcm9wZXJ0eSAoZS5nLiB0aGUgY3VyZW50IHZpZXcgZnJvbSBsb2FkZWQgZXZlbnQpXG4gICAgY29uc3QgdmlldyA9IDxQYWdlPmRhdGEub2JqZWN0O1xuICAgIHZpZXcuYmluZGluZ0NvbnRleHQgPSB2aWV3TW9kZWw7XG4gICAgLy8gPDwgb2JzZXJ2YWJsZS1jbGFzcy10c1xuXG4gICAgLy8gPj4gb2JzZXJ2YWJsZS1mcm9tLW9iamVjdC10c1xuICAgIC8vIGZyb21PYmplY3QgY3JlYXRlcyBhbiBPYnNlcnZhYmxlIGluc3RhbmNlIGFuZCBzZXRzIGl0cyBwcm9wZXJ0aWVzIGFjY29yZGluZyB0byB0aGUgc3VwcGxpZWQgSlMgb2JqZWN0XG4gICAgY29uc3QgbmV3Vmlld01vZGVsID0gZnJvbU9iamVjdCh7IFwibXlDb2xvclwiOiBcIkxpZ2h0Z3JheVwiIH0pO1xuICAgIC8vIHRoZSBhYm92ZSBpcyBlcXVhbCB0b1xuICAgIC8qXG4gICAgICAgIGxldCBuZXdWaWV3TW9kZWwgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBuZXdWaWV3TW9kZWwuc2V0KFwibXlDb2xvclwiLCBcIkxpZ2h0Z3JheVwiKTtcbiAgICAqL1xuICAgIC8vIDw8IG9ic2VydmFibGUtZnJvbS1vYmplY3QtdHNcblxuICAgIC8vID4+IG9ic2VydmFibGUtZnJvbS1vYmplY3QtcmVjdXJzaXZlLXRzXG4gICAgLy8gZnJvbU9iamVjdFJlY3Vyc2l2ZSB3aWxsIGNyZWF0ZSBuZXcgT2JzZXJ2YWJsZSBmb3IgZWFjaCBuZXN0ZWQgb2JqZWN0IChleHBlY3QgYXJyYXlzIGFuZCBmdW5jdGlvbnMpXG4gICAgY29uc3QgbmVzdGVkVmlld01vZGVsID0gZnJvbU9iamVjdFJlY3Vyc2l2ZSh7XG4gICAgICAgIGNsaWVudDogXCJKb2huIERvZVwiLFxuICAgICAgICBmYXZvcml0ZUNvbG9yOiB7IGhpc0NvbG9yOiBcIkdyZWVuXCIgfSAvLyBoaXNDb2xvciBpcyBhbiBPYnNlcnZhYmxlICh1c2luZyByZWN1cnNpdmUgY3JlYXRpb24gb2YgT2JzZXJ2YWJsZXMpXG4gICAgfSk7XG4gICAgLy8gdGhlIGFib3ZlIGlzIGVxdWFsIHRvXG4gICAgLypcbiAgICAgICAgY29uc3QgbmV3Vmlld01vZGVsMiA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG5ld1ZpZXdNb2RlbDIuc2V0KFwiY2xpZW50XCIsIFwiSm9obiBEb2VcIik7XG4gICAgICAgIG5ld1ZpZXdNb2RlbDIuc2V0KFwiZmF2b3JpdGVDb2xvclwiLCBmcm9tT2JqZWN0KCB7aGlzQ29sb3I6IFwiR3JlZW5cIiB9KSk7XG4gICAgKi9cbiAgICAvLyA8PCBvYnNlcnZhYmxlLWZyb20tb2JqZWN0LXJlY3Vyc2l2ZS10c1xuXG4gICAgLy8gPj4gcHJvcGVydHktY2hhbmdlLWV2ZW50LXRzXG4gICAgY29uc3QgbXlMaXN0ZW5lciA9IHZpZXdNb2RlbC5hZGRFdmVudExpc3RlbmVyKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgKGFyZ3M6IFByb3BlcnR5Q2hhbmdlRGF0YSkgPT4ge1xuICAgICAgICAvLyBhcmdzIGlzIG9mIHR5cGUgUHJvcGVydHlDaGFuZ2VEYXRhXG4gICAgICAgIGNvbnNvbGUubG9nKFwicHJvcGVydHlDaGFuZ2VFdmVudCBbZXZlbnROYW1lXTogXCIsIGFyZ3MuZXZlbnROYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJwcm9wZXJ0eUNoYW5nZUV2ZW50IFtwcm9wZXJ0eU5hbWVdOiBcIiwgYXJncy5wcm9wZXJ0eU5hbWUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInByb3BlcnR5Q2hhbmdlRXZlbnQgW3ZhbHVlXTogXCIsIGFyZ3MudmFsdWUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInByb3BlcnR5Q2hhbmdlRXZlbnQgW29sZFZhbHVlXTogXCIsIGFyZ3Mub2xkVmFsdWUpO1xuICAgIH0pO1xuICAgIC8vIDw8IHByb3BlcnR5LWNoYW5nZS1ldmVudC10c1xufVxuXG4vLyBkdW1teSBmdW5jaXRvbiBmb3Igc25pcHBldCBkZW1vbnN0cmF0aW9uZ1xuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgbGV0IHZpZXdNb2RlbCA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgY29uc3QgbXlMaXN0ZW5lciA9IHZpZXdNb2RlbC5hZGRFdmVudExpc3RlbmVyKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgKGFyZ3M6IFByb3BlcnR5Q2hhbmdlRGF0YSkgPT4ge1xuICAgICAgICAvLyBhcmdzIGlzIG9mIHR5cGUgUHJvcGVydHlDaGFuZ2VEYXRhXG4gICAgfSk7XG4gICAgLy8gPj4gcHJvcGVydHktY2hhbmdlLWV2ZW50LXJlbW92ZS1saXN0ZW5lci10c1xuICAgIHZpZXdNb2RlbC5yZW1vdmVFdmVudExpc3RlbmVyKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgbXlMaXN0ZW5lcik7XG4gICAgLy8gPDwgcHJvcGVydHktY2hhbmdlLWV2ZW50LXJlbW92ZS1saXN0ZW5lci10c1xufVxuIl19