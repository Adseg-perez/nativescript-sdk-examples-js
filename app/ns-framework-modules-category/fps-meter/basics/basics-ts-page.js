"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var application_settings_1 = require("application-settings");
var fps_meter_1 = require("tns-core-modules/fps-meter");
var callbackId;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("fps", "0");
    vm.set("minfps", "0");
    vm.set("fpslabeltitle", "Start FPS Meter");
    application_settings_1.setBoolean("status", false);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function toogleMeter(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var status = application_settings_1.getBoolean("status");
    if (status) {
        fps_meter_1.removeCallback(callbackId);
        fps_meter_1.stop();
        vm.set("fpslabeltitle", "Start FPS Meter");
    }
    else {
        callbackId = fps_meter_1.addCallback(function (fps, minFps) {
            vm.set("fps", fps.toFixed(2));
            vm.set("minfps", minFps.toFixed(2));
        });
        fps_meter_1.start();
        vm.set("fpslabeltitle", "Stop FPS Meter");
    }
    application_settings_1.setBoolean("status", !status);
}
exports.toogleMeter = toogleMeter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUM5RCw2REFBOEQ7QUFHOUQsd0RBQXNGO0FBR3RGLElBQUksVUFBVSxDQUFDO0FBQ2Ysd0JBQStCLElBQUk7SUFDL0IsSUFBTSxJQUFJLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQyxJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUM1QixFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQixFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0QixFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNDLGlDQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFSRCx3Q0FRQztBQUdELHFCQUE0QixJQUFJO0lBQzVCLElBQU0sSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsSUFBTSxNQUFNLEdBQVksaUNBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRVQsMEJBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQixnQkFBSSxFQUFFLENBQUM7UUFFUCxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUVKLFVBQVUsR0FBRyx1QkFBVyxDQUFDLFVBQUMsR0FBRyxFQUFFLE1BQU07WUFDakMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILGlCQUFLLEVBQUUsQ0FBQztRQUVSLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELGlDQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQXRCRCxrQ0FzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBzZXRCb29sZWFuLCBnZXRCb29sZWFuIH0gZnJvbSBcImFwcGxpY2F0aW9uLXNldHRpbmdzXCI7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xuLy8gPj4gaW1wb3J0LWZwcy1tZXRlclxuaW1wb3J0IHsgcmVtb3ZlQ2FsbGJhY2ssIHN0YXJ0LCBzdG9wLCBhZGRDYWxsYmFjayB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2Zwcy1tZXRlclwiO1xuLy8gPDwgaW1wb3J0LWZwcy1tZXRlclxuXG5sZXQgY2FsbGJhY2tJZDtcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICB2bS5zZXQoXCJmcHNcIiwgXCIwXCIpO1xuICAgIHZtLnNldChcIm1pbmZwc1wiLCBcIjBcIik7XG4gICAgdm0uc2V0KFwiZnBzbGFiZWx0aXRsZVwiLCBcIlN0YXJ0IEZQUyBNZXRlclwiKTtcbiAgICBzZXRCb29sZWFuKFwic3RhdHVzXCIsIGZhbHNlKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRvb2dsZU1ldGVyKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+YXJncy5vYmplY3QucGFnZTtcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XG4gICAgY29uc3Qgc3RhdHVzOiBib29sZWFuID0gZ2V0Qm9vbGVhbihcInN0YXR1c1wiKTtcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIC8vID4+IHN0b3AtZnBzLW1ldGVyLXRzXG4gICAgICAgIHJlbW92ZUNhbGxiYWNrKGNhbGxiYWNrSWQpO1xuICAgICAgICBzdG9wKCk7XG4gICAgICAgIC8vIDw8IHN0b3AtZnBzLW1ldGVyLXRzXG4gICAgICAgIHZtLnNldChcImZwc2xhYmVsdGl0bGVcIiwgXCJTdGFydCBGUFMgTWV0ZXJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gPj4gc3RhcnQtZnBzLW1ldGVyLXRzXG4gICAgICAgIGNhbGxiYWNrSWQgPSBhZGRDYWxsYmFjaygoZnBzLCBtaW5GcHMpID0+IHtcbiAgICAgICAgICAgIHZtLnNldChcImZwc1wiLCBmcHMudG9GaXhlZCgyKSk7XG4gICAgICAgICAgICB2bS5zZXQoXCJtaW5mcHNcIiwgbWluRnBzLnRvRml4ZWQoMikpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFydCgpO1xuICAgICAgICAvLyA8PCBzdGFydC1mcHMtbWV0ZXItdHNcbiAgICAgICAgdm0uc2V0KFwiZnBzbGFiZWx0aXRsZVwiLCBcIlN0b3AgRlBTIE1ldGVyXCIpO1xuICAgIH1cbiAgICBzZXRCb29sZWFuKFwic3RhdHVzXCIsICFzdGF0dXMpO1xufVxuIl19