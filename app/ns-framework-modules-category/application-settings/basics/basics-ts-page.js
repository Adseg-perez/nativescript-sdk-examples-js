"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var appSettings = require("tns-core-modules/application-settings");
var observable_1 = require("tns-core-modules/data/observable");
var Item = (function () {
    function Item(key, item) {
        this.key = key;
        this.item = item;
    }
    return Item;
}());
function onNavigatingTo(args) {
    var items = [];
    appSettings.setBoolean("isTurnedOn", true);
    var isTurnedOn = appSettings.getBoolean("isTurnedOn", false);
    items.push(new Item("isTurnedOn", "" + isTurnedOn));
    console.log(isTurnedOn);
    appSettings.setString("username", "NickIliev");
    var username = appSettings.getString("username");
    items.push(new Item("username", "" + username));
    console.log(username);
    appSettings.setNumber("locationX", 54.321);
    var locationX = parseFloat(appSettings.getNumber("locationX").toFixed(3));
    items.push(new Item("locationX", "" + locationX));
    console.log(locationX);
    var someKey = appSettings.getString("noSuchKey", "No string value");
    items.push(new Item("noSuchKey", "" + someKey));
    console.log(someKey);
    var defaultValue = appSettings.getString("noSuchKey");
    items.push(new Item("noSuchKey", "" + defaultValue));
    console.log(defaultValue);
    var noBoolKey = appSettings.hasKey("noBoolKey");
    items.push(new Item("noBoolKey", "" + noBoolKey));
    console.log(noBoolKey);
    var page = args.object;
    var viewModel = observable_1.fromObject({
        items: items
    });
    page.bindingContext = viewModel;
}
exports.onNavigatingTo = onNavigatingTo;
function clearAll() {
    appSettings.clear();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1FQUFxRTtBQUVyRSwrREFBOEQ7QUFFOUQ7SUFJSSxjQUFZLEdBQUcsRUFBRSxJQUFJO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDLEFBUkQsSUFRQztBQUVELHdCQUErQixJQUFJO0lBRS9CLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQyxJQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFHLFVBQVksQ0FBQyxDQUFDLENBQUM7SUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUl4QixXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvQyxJQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUcsUUFBVSxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBSXRCLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUcsU0FBVyxDQUFDLENBQUMsQ0FBQztJQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBS3ZCLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDdEUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBRyxPQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFLckIsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFHLFlBQWMsQ0FBQyxDQUFDLENBQUM7SUFDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUsxQixJQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUcsU0FBVyxDQUFDLENBQUMsQ0FBQztJQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBR3ZCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBTSxTQUFTLEdBQUcsdUJBQVUsQ0FBQztRQUN6QixLQUFLLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO0FBRXBDLENBQUM7QUFuREQsd0NBbURDO0FBRUQ7SUFHSSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7QUFFeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vID4+IGFwcC1zZXR0aW5ncy1yZXF1aXJlLXRzXG5pbXBvcnQgKiBhcyBhcHBTZXR0aW5ncyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xuLy8gPDwgYXBwLXNldHRpbmdzLXJlcXVpcmUtdHNcbmltcG9ydCB7IGZyb21PYmplY3QgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcblxuY2xhc3MgSXRlbSB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgaXRlbTogYW55O1xuXG4gICAgY29uc3RydWN0b3Ioa2V5LCBpdGVtKSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbiAgICAvLyA+PiBhcHAtc2V0dGluZ3MtYm9vbC1jb2RlLXRzXG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBhcHBTZXR0aW5ncy5zZXRCb29sZWFuKFwiaXNUdXJuZWRPblwiLCB0cnVlKTtcbiAgICBjb25zdCBpc1R1cm5lZE9uID0gYXBwU2V0dGluZ3MuZ2V0Qm9vbGVhbihcImlzVHVybmVkT25cIiwgZmFsc2UpO1xuICAgIGl0ZW1zLnB1c2gobmV3IEl0ZW0oXCJpc1R1cm5lZE9uXCIsIGAke2lzVHVybmVkT259YCkpO1xuICAgIGNvbnNvbGUubG9nKGlzVHVybmVkT24pO1xuICAgIC8vIDw8IGFwcC1zZXR0aW5ncy1ib29sLWNvZGUtdHNcblxuICAgIC8vID4+IGFwcC1zZXR0aW5ncy1zdHJpbmctY29kZS10c1xuICAgIGFwcFNldHRpbmdzLnNldFN0cmluZyhcInVzZXJuYW1lXCIsIFwiTmlja0lsaWV2XCIpO1xuICAgIGNvbnN0IHVzZXJuYW1lID0gYXBwU2V0dGluZ3MuZ2V0U3RyaW5nKFwidXNlcm5hbWVcIik7XG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcInVzZXJuYW1lXCIsIGAke3VzZXJuYW1lfWApKTtcbiAgICBjb25zb2xlLmxvZyh1c2VybmFtZSk7XG4gICAgLy8gPDwgYXBwLXNldHRpbmdzLXN0cmluZy1jb2RlLXRzXG5cbiAgICAvLyA+PiBhcHAtc2V0dGluZ3MtbnVtYmVyLWNvZGUtdHNcbiAgICBhcHBTZXR0aW5ncy5zZXROdW1iZXIoXCJsb2NhdGlvblhcIiwgNTQuMzIxKTtcbiAgICBjb25zdCBsb2NhdGlvblggPSBwYXJzZUZsb2F0KGFwcFNldHRpbmdzLmdldE51bWJlcihcImxvY2F0aW9uWFwiKS50b0ZpeGVkKDMpKTtcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibG9jYXRpb25YXCIsIGAke2xvY2F0aW9uWH1gKSk7XG4gICAgY29uc29sZS5sb2cobG9jYXRpb25YKTtcbiAgICAvLyA8PCBhcHAtc2V0dGluZ3MtbnVtYmVyLWNvZGUtdHNcblxuICAgIC8vID4+IGFwcC1zZXR0aW5ncy1kZWZhdWx0LXZhbHVlLWNvZGUtdHNcbiAgICAvLyB3aWxsIHJldHVybiBcIk5vIHN0cmluZyB2YWx1ZVwiIGlmIHRoZXJlIGlzIG5vIHZhbHVlIGZvciBcIm5vU3VjaEtleVwiXG4gICAgY29uc3Qgc29tZUtleSA9IGFwcFNldHRpbmdzLmdldFN0cmluZyhcIm5vU3VjaEtleVwiLCBcIk5vIHN0cmluZyB2YWx1ZVwiKTtcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibm9TdWNoS2V5XCIsIGAke3NvbWVLZXl9YCkpO1xuICAgIGNvbnNvbGUubG9nKHNvbWVLZXkpO1xuICAgIC8vIDw8IGFwcC1zZXR0aW5ncy1kZWZhdWx0LXZhbHVlLWNvZGUtdHNcblxuICAgIC8vID4+IGFwcC1zZXR0aW5ncy1uby12YWx1ZS1jb2RlLXRzXG4gICAgLy8gd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIHZhbHVlIGZvciBcIm5vU3VjaEtleVwiXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gYXBwU2V0dGluZ3MuZ2V0U3RyaW5nKFwibm9TdWNoS2V5XCIpO1xuICAgIGl0ZW1zLnB1c2gobmV3IEl0ZW0oXCJub1N1Y2hLZXlcIiwgYCR7ZGVmYXVsdFZhbHVlfWApKTtcbiAgICBjb25zb2xlLmxvZyhkZWZhdWx0VmFsdWUpO1xuICAgIC8vIDw8IGFwcC1zZXR0aW5ncy1uby12YWx1ZS1jb2RlLXRzXG5cbiAgICAvLyA+PiBhcHAtc2V0dGluZ3Mtbm8ta2V5LWNvZGUtdHNcbiAgICAvLyB3aWxsIHJldHVybiBmYWxzZSBpZiB0aGVyZSBpcyBubyBcIm5vQm9vbEtleVwiXG4gICAgY29uc3Qgbm9Cb29sS2V5ID0gYXBwU2V0dGluZ3MuaGFzS2V5KFwibm9Cb29sS2V5XCIpO1xuICAgIGl0ZW1zLnB1c2gobmV3IEl0ZW0oXCJub0Jvb2xLZXlcIiwgYCR7bm9Cb29sS2V5fWApKTtcbiAgICBjb25zb2xlLmxvZyhub0Jvb2xLZXkpO1xuICAgIC8vIDw8IGFwcC1zZXR0aW5ncy1uby1rZXktY29kZS10c1xuXG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZpZXdNb2RlbCA9IGZyb21PYmplY3Qoe1xuICAgICAgICBpdGVtczogaXRlbXNcbiAgICB9KTtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2aWV3TW9kZWw7XG5cbn1cblxuZnVuY3Rpb24gY2xlYXJBbGwoKSB7XG4gICAgLy8gPj4gYXBwLXNldHRpbmdzLWNsZWFyLWFsbC10c1xuICAgIC8vIFJlbW92ZXMgYWxsIHZhbHVlcy5cbiAgICBhcHBTZXR0aW5ncy5jbGVhcigpO1xuICAgIC8vIDw8IGFwcC1zZXR0aW5ncy1jbGVhci1hbGwtdHNcbn1cbiJdfQ==