"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("tns-core-modules/application");
var observable_1 = require("tns-core-modules/data/observable");
var platform_1 = require("tns-core-modules/platform");
var utilsModule = require("tns-core-modules/utils/utils");
var vm;
var observer;
function onNavigatingTo(args) {
    var page = args.object;
    vm = new observable_1.Observable();
    vm.set("info", "Using iOS Notification Observer \nto check the battery life");
    vm.set("batteryLife", "0");
    vm.set("isIOS", platform_1.isIOS);
    page.bindingContext = vm;
    page.actionBar.title = args.context.title;
}
exports.onNavigatingTo = onNavigatingTo;
function onNavigatedTo(args) {
    vm.set("actionBarTitle", args.context.actionBarTitle);
    if (platform_1.isIOS) {
        utilsModule.ios.getter(UIDevice, UIDevice.currentDevice).batteryMonitoringEnabled = true;
        vm.set("batteryLife", +(utilsModule.ios.getter(UIDevice, UIDevice.currentDevice).batteryLevel * 100).toFixed(1));
        observer = application.ios.addNotificationObserver(UIDeviceBatteryLevelDidChangeNotification, function (notification) {
            vm.set("batteryLife", +(utilsModule.ios.getter(UIDevice, UIDevice.currentDevice).batteryLevel * 100).toFixed(1));
        });
    }
}
exports.onNavigatedTo = onNavigatedTo;
function onUnloaded() {
    if (platform_1.isIOS) {
        application.ios.removeNotificationObserver(observer, UIDeviceBatteryLevelDidChangeNotification);
    }
}
exports.onUnloaded = onUnloaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9zLW5vdGlmaWNhdGlvbi1vYnNlcnZlci10cy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW9zLW5vdGlmaWNhdGlvbi1vYnNlcnZlci10cy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMERBQTREO0FBQzVELCtEQUE4RDtBQUM5RCxzREFBa0Q7QUFDbEQsMERBQTREO0FBRTVELElBQUksRUFBRSxDQUFDO0FBQ1AsSUFBSSxRQUFRLENBQUM7QUFFYix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUN0QixFQUFFLENBQUMsR0FBRyxDQUNGLE1BQU0sRUFDTiw2REFBNkQsQ0FDaEUsQ0FBQztJQUNGLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGdCQUFLLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM5QyxDQUFDO0FBWEQsd0NBV0M7QUFFRCx1QkFBOEIsSUFBSTtJQUM5QixFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFdEQsRUFBRSxDQUFDLENBQUMsZ0JBQUssQ0FBQyxDQUFDLENBQUM7UUFDUixXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQztRQUN6RixFQUFFLENBQUMsR0FBRyxDQUNGLGFBQWEsRUFDYixDQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUM3RixDQUFDO1FBQ0YsUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQzlDLHlDQUF5QyxFQUN6QyxVQUFBLFlBQVk7WUFDUixFQUFFLENBQUMsR0FBRyxDQUNGLGFBQWEsRUFDYixDQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUM3RixDQUFDO1FBQ04sQ0FBQyxDQUNKLENBQUM7SUFDTixDQUFDO0FBRUwsQ0FBQztBQXBCRCxzQ0FvQkM7QUFFRDtJQUNJLEVBQUUsQ0FBQyxDQUFDLGdCQUFLLENBQUMsQ0FBQyxDQUFDO1FBRVIsV0FBVyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEVBQUUseUNBQXlDLENBQUMsQ0FBQztJQUVwRyxDQUFDO0FBQ0wsQ0FBQztBQU5ELGdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGlzSU9TIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIjtcbmltcG9ydCAqIGFzIHV0aWxzTW9kdWxlIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3V0aWxzL3V0aWxzXCI7XG5cbmxldCB2bTtcbmxldCBvYnNlcnZlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3Q7XG4gICAgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgIHZtLnNldChcbiAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgIFwiVXNpbmcgaU9TIE5vdGlmaWNhdGlvbiBPYnNlcnZlciBcXG50byBjaGVjayB0aGUgYmF0dGVyeSBsaWZlXCJcbiAgICApO1xuICAgIHZtLnNldChcImJhdHRlcnlMaWZlXCIsIFwiMFwiKTtcbiAgICB2bS5zZXQoXCJpc0lPU1wiLCBpc0lPUyk7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xuICAgIHBhZ2UuYWN0aW9uQmFyLnRpdGxlID0gYXJncy5jb250ZXh0LnRpdGxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0ZWRUbyhhcmdzKSB7XG4gICAgdm0uc2V0KFwiYWN0aW9uQmFyVGl0bGVcIiwgYXJncy5jb250ZXh0LmFjdGlvbkJhclRpdGxlKTtcbiAgICAvLyA+PiBhcHAtaW9zLW9ic2VydmVyLWNvZGUtdHNcbiAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgdXRpbHNNb2R1bGUuaW9zLmdldHRlcihVSURldmljZSwgVUlEZXZpY2UuY3VycmVudERldmljZSkuYmF0dGVyeU1vbml0b3JpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdm0uc2V0KFxuICAgICAgICAgICAgXCJiYXR0ZXJ5TGlmZVwiLFxuICAgICAgICAgICAgKyAodXRpbHNNb2R1bGUuaW9zLmdldHRlcihVSURldmljZSwgVUlEZXZpY2UuY3VycmVudERldmljZSkuYmF0dGVyeUxldmVsICogMTAwKS50b0ZpeGVkKDEpXG4gICAgICAgICk7XG4gICAgICAgIG9ic2VydmVyID0gYXBwbGljYXRpb24uaW9zLmFkZE5vdGlmaWNhdGlvbk9ic2VydmVyKFxuICAgICAgICAgICAgVUlEZXZpY2VCYXR0ZXJ5TGV2ZWxEaWRDaGFuZ2VOb3RpZmljYXRpb24sXG4gICAgICAgICAgICBub3RpZmljYXRpb24gPT4ge1xuICAgICAgICAgICAgICAgIHZtLnNldChcbiAgICAgICAgICAgICAgICAgICAgXCJiYXR0ZXJ5TGlmZVwiLFxuICAgICAgICAgICAgICAgICAgICArICh1dGlsc01vZHVsZS5pb3MuZ2V0dGVyKFVJRGV2aWNlLCBVSURldmljZS5jdXJyZW50RGV2aWNlKS5iYXR0ZXJ5TGV2ZWwgKiAxMDApLnRvRml4ZWQoMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbiAgICAvLyA8PCBhcHAtaW9zLW9ic2VydmVyLWNvZGUtdHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVW5sb2FkZWQoKSB7XG4gICAgaWYgKGlzSU9TKSB7XG4gICAgICAgIC8vID4+IGFwcC1pb3Mtb2JzZXJ2ZXItcmVtb3ZlLXRzXG4gICAgICAgIGFwcGxpY2F0aW9uLmlvcy5yZW1vdmVOb3RpZmljYXRpb25PYnNlcnZlcihvYnNlcnZlciwgVUlEZXZpY2VCYXR0ZXJ5TGV2ZWxEaWRDaGFuZ2VOb3RpZmljYXRpb24pO1xuICAgICAgICAvLyA8PCBhcHAtaW9zLW9ic2VydmVyLXJlbW92ZS10c1xuICAgIH1cbn1cbiJdfQ==