"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var applicationModule = require("tns-core-modules/application");
var observable_1 = require("tns-core-modules/data/observable");
var platform_1 = require("tns-core-modules/platform");
var vm;
var receiver;
function onNavigatingTo(args) {
    var page = args.object;
    page.actionBar.title = "";
    vm = new observable_1.Observable();
    vm.set("info", "Using Android Broadcast Receiver \nto check the battery life");
    vm.set("batteryLife", "0");
    vm.set("isAndroid", platform_1.isAndroid);
    page.bindingContext = vm;
    page.actionBar.title = args.context.title;
}
exports.onNavigatingTo = onNavigatingTo;
function onNavigatedTo(args) {
    vm.set("actionBarTitle", args.context.actionBarTitle);
    if (platform_1.isAndroid) {
        receiver = applicationModule.android.registerBroadcastReceiver(android.content.Intent.ACTION_BATTERY_CHANGED, function (context, intent) {
            var level = intent.getIntExtra(android.os.BatteryManager.EXTRA_LEVEL, -1);
            var scale = intent.getIntExtra(android.os.BatteryManager.EXTRA_SCALE, -1);
            var percent = (level / scale) * 100.0;
            vm.set("batteryLife", percent.toString());
        });
    }
}
exports.onNavigatedTo = onNavigatedTo;
function onUnloaded() {
    if (platform_1.isAndroid) {
        applicationModule.android.unregisterBroadcastReceiver(receiver);
    }
}
exports.onUnloaded = onUnloaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5kcm9pZC1icm9hZGNhc3QtcmVjZWl2ZXItdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFuZHJvaWQtYnJvYWRjYXN0LXJlY2VpdmVyLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnRUFBa0U7QUFDbEUsK0RBQThEO0FBQzlELHNEQUFzRDtBQUd0RCxJQUFJLEVBQUUsQ0FBQztBQUNQLElBQUksUUFBUSxDQUFDO0FBQ2Isd0JBQStCLElBQW1CO0lBQzlDLElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQzFCLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUN0QixFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0lBQy9FLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG9CQUFTLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM5QyxDQUFDO0FBVEQsd0NBU0M7QUFFRCx1QkFBOEIsSUFBbUI7SUFDN0MsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXRELEVBQUUsQ0FBQyxDQUFDLG9CQUFTLENBQUMsQ0FBQyxDQUFDO1FBRVosUUFBUSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FDMUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQzdDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDWixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUUsSUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3hDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztBQUVMLENBQUM7QUFmRCxzQ0FlQztBQUVEO0lBQ0ksRUFBRSxDQUFDLENBQUMsb0JBQVMsQ0FBQyxDQUFDLENBQUM7UUFFWixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFcEUsQ0FBQztBQUNMLENBQUM7QUFORCxnQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgYXBwbGljYXRpb25Nb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGlzQW5kcm9pZCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtXCI7XG5pbXBvcnQgeyBQYWdlLCBOYXZpZ2F0ZWREYXRhIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xuXG5sZXQgdm07XG5sZXQgcmVjZWl2ZXI7XG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJnczogTmF2aWdhdGVkRGF0YSkge1xuICAgIGNvbnN0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBwYWdlLmFjdGlvbkJhci50aXRsZSA9IFwiXCI7XG4gICAgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgIHZtLnNldChcImluZm9cIiwgXCJVc2luZyBBbmRyb2lkIEJyb2FkY2FzdCBSZWNlaXZlciBcXG50byBjaGVjayB0aGUgYmF0dGVyeSBsaWZlXCIpO1xuICAgIHZtLnNldChcImJhdHRlcnlMaWZlXCIsIFwiMFwiKTtcbiAgICB2bS5zZXQoXCJpc0FuZHJvaWRcIiwgaXNBbmRyb2lkKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG4gICAgcGFnZS5hY3Rpb25CYXIudGl0bGUgPSBhcmdzLmNvbnRleHQudGl0bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRlZFRvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICB2bS5zZXQoXCJhY3Rpb25CYXJUaXRsZVwiLCBhcmdzLmNvbnRleHQuYWN0aW9uQmFyVGl0bGUpO1xuICAgIC8vID4+IGJyb2FkY2FzdC1yZWNlaXZlci10c1xuICAgIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgICAgLy8gdXNlIHRucy1wbGF0Zm9ybS1kY2xhcmF0aW9ucyB0byBhY2Nlc3MgbmF0aXZlIEFQSXMgKGUuZy4gYW5kcm9pZC5jb250ZW50LkludGVudClcbiAgICAgICAgcmVjZWl2ZXIgPSBhcHBsaWNhdGlvbk1vZHVsZS5hbmRyb2lkLnJlZ2lzdGVyQnJvYWRjYXN0UmVjZWl2ZXIoXG4gICAgICAgICAgICBhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkFDVElPTl9CQVRURVJZX0NIQU5HRUQsXG4gICAgICAgICAgICAoY29udGV4dCwgaW50ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSBpbnRlbnQuZ2V0SW50RXh0cmEoYW5kcm9pZC5vcy5CYXR0ZXJ5TWFuYWdlci5FWFRSQV9MRVZFTCwgLTEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gaW50ZW50LmdldEludEV4dHJhKGFuZHJvaWQub3MuQmF0dGVyeU1hbmFnZXIuRVhUUkFfU0NBTEUsIC0xKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwZXJjZW50ID0gKGxldmVsIC8gc2NhbGUpICogMTAwLjA7XG4gICAgICAgICAgICAgICAgdm0uc2V0KFwiYmF0dGVyeUxpZmVcIiwgcGVyY2VudC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyA8PCBicm9hZGNhc3QtcmVjZWl2ZXItdHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVW5sb2FkZWQoKSB7XG4gICAgaWYgKGlzQW5kcm9pZCkge1xuICAgICAgICAvLyA+PiBicm9hZGNhc3QtcmVjZWl2ZXItcmVtb3ZlLXRzXG4gICAgICAgIGFwcGxpY2F0aW9uTW9kdWxlLmFuZHJvaWQudW5yZWdpc3RlckJyb2FkY2FzdFJlY2VpdmVyKHJlY2VpdmVyKTtcbiAgICAgICAgLy8gPDwgYnJvYWRjYXN0LXJlY2VpdmVyLXJlbW92ZS10c1xuICAgIH1cbn1cbiJdfQ==