"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var image_source_1 = require("tns-core-modules/image-source");
var file_system_1 = require("tns-core-modules/file-system");
var image_asset_1 = require("tns-core-modules/image-asset");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("fps", "0");
    var folder = file_system_1.knownFolders.currentApp();
    var filePath = file_system_1.path.join(folder.path, "images/logo.png");
    vm.set("imagePath", filePath);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function makeCopyFromFile(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var folder = file_system_1.knownFolders.currentApp();
    var imagePath = file_system_1.path.join(folder.path, "images/logo.png");
    var img = image_source_1.fromFile(imagePath);
    var folderDest = file_system_1.knownFolders.documents();
    var pathDest = file_system_1.path.join(folderDest.path, "test.png");
    var saved = img.saveToFile(pathDest, "png");
    if (saved) {
        console.log("Image saved successfully!");
        vm.set("imageCopyPath", pathDest);
    }
}
exports.makeCopyFromFile = makeCopyFromFile;
function makeCopyFromAsset(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var folder = file_system_1.knownFolders.currentApp();
    var pathImage = file_system_1.path.join(folder.path, "images/logo.png");
    var imageAsset = new image_asset_1.ImageAsset(pathImage);
    imageAsset.options = {
        width: 100,
        height: 100,
        keepAspectRatio: true
    };
    var source = new image_source_1.ImageSource();
    source.fromAsset(imageAsset)
        .then(function (imageSource) {
        var folderPath = file_system_1.knownFolders.documents().path;
        var fileName = "test.png";
        var filePath = file_system_1.path.join(folderPath, fileName);
        var saved = imageSource.saveToFile(filePath, "png");
        if (saved) {
            console.log("Image saved successfully!");
            vm.set("imageAssetCopyPath", file_system_1.path);
        }
    })
        .catch(function (e) {
        console.log("Error: ");
        console.log(e);
    });
}
exports.makeCopyFromAsset = makeCopyFromAsset;
function makeBase64String(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var folder = file_system_1.knownFolders.currentApp();
    var filePath = file_system_1.path.join(folder.path, "images/logo.png");
    var img = image_source_1.fromFile(filePath);
    var base64String = img.toBase64String("png");
    vm.set("base64String", base64String);
}
exports.makeBase64String = makeBase64String;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS1pbWFnZS10cy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2F2ZS1pbWFnZS10cy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQTREO0FBQzVELDhEQUFxRTtBQUNyRSw0REFBd0U7QUFDeEUsNERBQXdEO0FBR3hELHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLElBQU0sTUFBTSxHQUFHLDBCQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekMsSUFBTSxRQUFRLEdBQUcsa0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFSRCx3Q0FRQztBQUdELDBCQUFpQyxJQUFJO0lBQ2pDLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMzQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBRS9CLElBQU0sTUFBTSxHQUFvQiwwQkFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzFELElBQU0sU0FBUyxHQUFHLGtCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUU1RCxJQUFNLEdBQUcsR0FBOEIsdUJBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzRCxJQUFNLFVBQVUsR0FBRywwQkFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzVDLElB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ZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7SW1hZ2VTb3VyY2UsIGZyb21GaWxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvaW1hZ2Utc291cmNlXCI7XHJcbmltcG9ydCB7cGF0aCwga25vd25Gb2xkZXJzLCBGb2xkZXJ9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XHJcbmltcG9ydCB7SW1hZ2VBc3NldH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvaW1hZ2UtYXNzZXRcIjtcclxuaW1wb3J0IHtQYWdlfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0O1xyXG4gICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG4gICAgdm0uc2V0KFwiZnBzXCIsIFwiMFwiKTtcclxuICAgIGNvbnN0IGZvbGRlciA9IGtub3duRm9sZGVycy5jdXJyZW50QXBwKCk7XHJcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihmb2xkZXIucGF0aCwgXCJpbWFnZXMvbG9nby5wbmdcIik7XHJcbiAgICB2bS5zZXQoXCJpbWFnZVBhdGhcIiwgZmlsZVBhdGgpO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDb3B5RnJvbUZpbGUoYXJncykge1xyXG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiBhcmdzLm9iamVjdC5wYWdlO1xyXG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xyXG5cclxuICAgIGNvbnN0IGZvbGRlcjogRm9sZGVyID0gPEZvbGRlcj4ga25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKTtcclxuICAgIGNvbnN0IGltYWdlUGF0aCA9IHBhdGguam9pbihmb2xkZXIucGF0aCwgXCJpbWFnZXMvbG9nby5wbmdcIik7XHJcbiAgICAvLyA+PiBpbWFnZS1zb3VyY2Utc2F2ZS1mcm9tLWZpbGUtdHNcclxuICAgIGNvbnN0IGltZzogSW1hZ2VTb3VyY2UgPSA8SW1hZ2VTb3VyY2U+IGZyb21GaWxlKGltYWdlUGF0aCk7XHJcbiAgICBjb25zdCBmb2xkZXJEZXN0ID0ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xyXG4gICAgY29uc3QgcGF0aERlc3QgPSBwYXRoLmpvaW4oZm9sZGVyRGVzdC5wYXRoLCBcInRlc3QucG5nXCIpO1xyXG4gICAgY29uc3Qgc2F2ZWQ6IGJvb2xlYW4gPSBpbWcuc2F2ZVRvRmlsZShwYXRoRGVzdCwgXCJwbmdcIik7XHJcbiAgICBpZiAoc2F2ZWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkltYWdlIHNhdmVkIHN1Y2Nlc3NmdWxseSFcIik7XHJcbiAgICAgICAgLy8gPj4gKGhpZGUpXHJcbiAgICAgICAgdm0uc2V0KFwiaW1hZ2VDb3B5UGF0aFwiLCBwYXRoRGVzdCk7XHJcbiAgICAgICAgLy8gPDwgKGhpZGUpXHJcbiAgICB9XHJcbiAgICAvLyA8PCBpbWFnZS1zb3VyY2Utc2F2ZS1mcm9tLWZpbGUtdHNcclxuXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDb3B5RnJvbUFzc2V0KGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIGNvbnN0IGZvbGRlcjogRm9sZGVyID0gPEZvbGRlcj4ga25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKTtcclxuICAgIGNvbnN0IHBhdGhJbWFnZSA9IHBhdGguam9pbihmb2xkZXIucGF0aCwgXCJpbWFnZXMvbG9nby5wbmdcIik7XHJcbiAgICBjb25zdCBpbWFnZUFzc2V0ID0gbmV3IEltYWdlQXNzZXQocGF0aEltYWdlKTtcclxuICAgIGltYWdlQXNzZXQub3B0aW9ucyA9IHtcclxuICAgICAgICB3aWR0aDogMTAwLFxyXG4gICAgICAgIGhlaWdodDogMTAwLFxyXG4gICAgICAgIGtlZXBBc3BlY3RSYXRpbzogdHJ1ZVxyXG4gICAgfTtcclxuICAgIC8vID4+IGltYWdlLXNvdXJjZS1zYXZlLWZyb20tYXNzZXQtdHNcclxuICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBJbWFnZVNvdXJjZSgpO1xyXG4gICAgc291cmNlLmZyb21Bc3NldChpbWFnZUFzc2V0KVxyXG4gICAgLnRoZW4oKGltYWdlU291cmNlOiBJbWFnZVNvdXJjZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlclBhdGg6IHN0cmluZyA9ICBrbm93bkZvbGRlcnMuZG9jdW1lbnRzKCkucGF0aDtcclxuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IFwidGVzdC5wbmdcIjtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihmb2xkZXJQYXRoLCBmaWxlTmFtZSk7XHJcbiAgICAgICAgY29uc3Qgc2F2ZWQ6IGJvb2xlYW4gPSBpbWFnZVNvdXJjZS5zYXZlVG9GaWxlKGZpbGVQYXRoLCBcInBuZ1wiKTtcclxuICAgICAgICBpZiAoc2F2ZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJbWFnZSBzYXZlZCBzdWNjZXNzZnVsbHkhXCIpO1xyXG4gICAgICAgICAgICAvLyA+PiAoaGlkZSlcclxuICAgICAgICAgICAgdm0uc2V0KFwiaW1hZ2VBc3NldENvcHlQYXRoXCIsIHBhdGgpO1xyXG4gICAgICAgICAgICAvLyA8PCAoaGlkZSlcclxuICAgICAgICB9XHJcbiAgICAvLyA8PCBpbWFnZS1zb3VyY2Utc2F2ZS1mcm9tLWFzc2V0LXRzXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlQmFzZTY0U3RyaW5nKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcclxuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcclxuICAgIC8vID4+IGltYWdlLXNvdXJjZS1jcmVhdGUtYmFzZTY0LXRzXHJcbiAgICBjb25zdCBmb2xkZXI6IEZvbGRlciA9IDxGb2xkZXI+IGtub3duRm9sZGVycy5jdXJyZW50QXBwKCk7XHJcbiAgICBjb25zdCBmaWxlUGF0aDogc3RyaW5nID0gcGF0aC5qb2luKGZvbGRlci5wYXRoLCBcImltYWdlcy9sb2dvLnBuZ1wiKTtcclxuICAgIGNvbnN0IGltZzogSW1hZ2VTb3VyY2UgPSA8SW1hZ2VTb3VyY2U+IGZyb21GaWxlKGZpbGVQYXRoKTtcclxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGltZy50b0Jhc2U2NFN0cmluZyhcInBuZ1wiKTtcclxuICAgIC8vIDw8IGltYWdlLXNvdXJjZS1jcmVhdGUtYmFzZTY0LXRzXHJcbiAgICB2bS5zZXQoXCJiYXNlNjRTdHJpbmdcIiwgYmFzZTY0U3RyaW5nKTtcclxufVxyXG4iXX0=