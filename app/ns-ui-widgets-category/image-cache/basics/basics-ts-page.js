"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var image_cache_1 = require("tns-core-modules/ui/image-cache");
var observable_1 = require("tns-core-modules/data/observable");
var image_source_1 = require("tns-core-modules/image-source");
function onLoaded(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    cacheImage(vm);
    page.bindingContext = vm;
}
exports.onLoaded = onLoaded;
function cacheImage(viewModel) {
    var cache = new image_cache_1.Cache();
    cache.placeholder = image_source_1.fromFile("~/images/logo.png");
    cache.maxRequests = 5;
    viewModel.set("imageSource", cache.placeholder);
    cache.enableDownload();
    var cachedImageSource;
    var url = "https://avatars1.githubusercontent.com/u/7392261?v=4";
    var myImage = cache.get(url);
    if (myImage) {
        cachedImageSource = image_source_1.fromNativeSource(myImage);
        viewModel.set("imageSource", cachedImageSource);
    }
    else {
        cache.push({
            key: url,
            url: url,
            completed: function (image, key) {
                if (url === key) {
                    cachedImageSource = image_source_1.fromNativeSource(image);
                    viewModel.set("imageSource", cachedImageSource);
                }
            }
        });
    }
    cache.disableDownload();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtEQUF3RDtBQUV4RCwrREFBeUU7QUFDekUsOERBQTJFO0FBRzNFLGtCQUF5QixJQUFlO0lBQ3BDLElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFFNUIsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWYsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQVBELDRCQU9DO0FBRUQsb0JBQW9CLFNBQVM7SUFFekIsSUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxFQUFFLENBQUM7SUFDMUIsS0FBSyxDQUFDLFdBQVcsR0FBRyx1QkFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbEQsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFHdEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBR2hELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUV2QixJQUFJLGlCQUFpQixDQUFDO0lBQ3RCLElBQU0sR0FBRyxHQUFHLHNEQUFzRCxDQUFDO0lBRW5FLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFL0IsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVWLGlCQUFpQixHQUFHLCtCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBRUosS0FBSyxDQUFDLElBQUksQ0FBQztZQUNQLEdBQUcsRUFBRSxHQUFHO1lBQ1IsR0FBRyxFQUFFLEdBQUc7WUFDUixTQUFTLEVBQUUsVUFBQyxLQUFLLEVBQUUsR0FBRztnQkFDbEIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2QsaUJBQWlCLEdBQUcsK0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzVDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3BELENBQUM7WUFDTCxDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUU1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPj4gaW1hZ2UtY2FjaGUtcmVxdWlyZS10c1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZS1jYWNoZVwiO1xuLy8gPDwgaW1hZ2UtY2FjaGUtcmVxdWlyZS10c1xuaW1wb3J0IHsgRXZlbnREYXRhLCBPYnNlcnZhYmxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBmcm9tRmlsZSwgZnJvbU5hdGl2ZVNvdXJjZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ltYWdlLXNvdXJjZVwiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnN0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XG5cbiAgICBjYWNoZUltYWdlKHZtKTtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cblxuZnVuY3Rpb24gY2FjaGVJbWFnZSh2aWV3TW9kZWwpIHtcbiAgICAvLyA+PiBpbWFnZS1jYWNoZS1jb2RlLXRzXG4gICAgY29uc3QgY2FjaGUgPSBuZXcgQ2FjaGUoKTtcbiAgICBjYWNoZS5wbGFjZWhvbGRlciA9IGZyb21GaWxlKFwifi9pbWFnZXMvbG9nby5wbmdcIik7XG4gICAgY2FjaGUubWF4UmVxdWVzdHMgPSA1O1xuXG4gICAgLy8gc2V0IHRoZSBwbGFjZWhvbGRlciB3aGlsZSB0aGUgZGVzaXJlZCBpbWFnZSBpcyBkb253bG9hZGVkXG4gICAgdmlld01vZGVsLnNldChcImltYWdlU291cmNlXCIsIGNhY2hlLnBsYWNlaG9sZGVyKTtcblxuICAgIC8vIEVuYWJsZSBkb3dubG9hZCB3aGlsZSBub3Qgc2Nyb2xsaW5nXG4gICAgY2FjaGUuZW5hYmxlRG93bmxvYWQoKTtcblxuICAgIGxldCBjYWNoZWRJbWFnZVNvdXJjZTtcbiAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vYXZhdGFyczEuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvNzM5MjI2MT92PTRcIjtcbiAgICAvLyBUcnkgdG8gcmVhZCB0aGUgaW1hZ2UgZnJvbSB0aGUgY2FjaGVcbiAgICBjb25zdCBteUltYWdlID0gY2FjaGUuZ2V0KHVybCk7XG5cbiAgICBpZiAobXlJbWFnZSkge1xuICAgICAgICAvLyBJZiBwcmVzZW50IC0tIHVzZSBpdC5cbiAgICAgICAgY2FjaGVkSW1hZ2VTb3VyY2UgPSBmcm9tTmF0aXZlU291cmNlKG15SW1hZ2UpO1xuICAgICAgICB2aWV3TW9kZWwuc2V0KFwiaW1hZ2VTb3VyY2VcIiwgY2FjaGVkSW1hZ2VTb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIG5vdCBwcmVzZW50IC0tIHJlcXVlc3QgaXRzIGRvd25sb2FkICsgcHV0IGl0IGluIHRoZSBjYWNoZS5cbiAgICAgICAgY2FjaGUucHVzaCh7XG4gICAgICAgICAgICBrZXk6IHVybCxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgY29tcGxldGVkOiAoaW1hZ2UsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1cmwgPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZWRJbWFnZVNvdXJjZSA9IGZyb21OYXRpdmVTb3VyY2UoaW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3TW9kZWwuc2V0KFwiaW1hZ2VTb3VyY2VcIiwgY2FjaGVkSW1hZ2VTb3VyY2UpOyAvLyBzZXQgdGhlIGRvd25sb2FkZWQgaWFtZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERpc2FibGUgZG93bmxvYWQgd2hpbGUgc2Nyb2xsaW5nXG4gICAgY2FjaGUuZGlzYWJsZURvd25sb2FkKCk7XG4gICAgLy8gPDwgaW1hZ2UtY2FjaGUtY29kZS10c1xufVxuIl19