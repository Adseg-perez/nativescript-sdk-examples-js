"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var image_source_1 = require("tns-core-modules/image-source");
var image_1 = require("tns-core-modules/ui/image");
var label_1 = require("tns-core-modules/ui/label");
function onStackLoaded(args) {
    var stack = args.object;
    var image = new image_1.Image();
    var imageSource = image_source_1.fromResource("icon");
    image.imageSource = imageSource;
    image.height = 100;
    image.stretch = "aspectFit";
    var lbl = new label_1.Label();
    lbl.text = "Image created via fromResource() method";
    lbl.css = "margin-top: 20; margin-left: 20;";
    var imageFromBase64 = new image_1.Image();
    var myImageSource = usingBase64Strings();
    imageFromBase64.imageSource = myImageSource;
    imageFromBase64.height = 100;
    imageFromBase64.stretch = "aspectFit";
    var lbl2 = new label_1.Label();
    lbl2.text = "Image created via base64 string";
    lbl2.css = "margin-top: 120; margin-left: 20;";
    stack.addChild(lbl);
    stack.addChild(image);
    stack.addChild(lbl2);
    stack.addChild(imageFromBase64);
}
exports.onStackLoaded = onStackLoaded;
function usingBase64Strings() {
    var myImageSource = image_source_1.fromResource("icon");
    var imageAsBase64String = myImageSource.toBase64String("png", 100);
    var base64ImageSource = image_source_1.fromBase64(imageAsBase64String);
    return base64ImageSource;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utc291cmNlLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZS1zb3VyY2UtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhEQUEwRTtBQUMxRSxtREFBa0Q7QUFDbEQsbURBQWtEO0FBRWxELHVCQUE4QixJQUFJO0lBQzlCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFJMUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUMxQixJQUFNLFdBQVcsR0FBRywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLEtBQUssQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2hDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQ25CLEtBQUssQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO0lBRzVCLElBQU0sR0FBRyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFDeEIsR0FBRyxDQUFDLElBQUksR0FBRyx5Q0FBeUMsQ0FBQztJQUNyRCxHQUFHLENBQUMsR0FBRyxHQUFHLGtDQUFrQyxDQUFDO0lBRTdDLElBQU0sZUFBZSxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFDcEMsSUFBTSxhQUFhLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQztJQUMzQyxlQUFlLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztJQUM1QyxlQUFlLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUM3QixlQUFlLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztJQUV0QyxJQUFNLElBQUksR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsaUNBQWlDLENBQUM7SUFDOUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxtQ0FBbUMsQ0FBQztJQUUvQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUEvQkQsc0NBK0JDO0FBRUQ7SUFHSSxJQUFNLGFBQWEsR0FBRywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLElBQU0sbUJBQW1CLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckUsSUFBTSxpQkFBaUIsR0FBRyx5QkFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFHMUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tQmFzZTY0LCBmcm9tUmVzb3VyY2UgfSAgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvaW1hZ2Utc291cmNlXCI7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2xhYmVsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvblN0YWNrTG9hZGVkKGFyZ3MpIHtcbiAgICBjb25zdCBzdGFjayA9IGFyZ3Mub2JqZWN0O1xuICAgIC8vID4+IGltYWdlLWltYWdlLXNvdXJjZS10c1xuICAgIC8vIGltcG9ydCB7IGZyb21SZXNvdXJjZSB9ICBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9pbWFnZS1zb3VyY2VcIjtcbiAgICAvLyBpbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBjb25zdCBpbWFnZVNvdXJjZSA9IGZyb21SZXNvdXJjZShcImljb25cIik7XG4gICAgaW1hZ2UuaW1hZ2VTb3VyY2UgPSBpbWFnZVNvdXJjZTtcbiAgICBpbWFnZS5oZWlnaHQgPSAxMDA7XG4gICAgaW1hZ2Uuc3RyZXRjaCA9IFwiYXNwZWN0Rml0XCI7XG4gICAgLy8gPDwgaW1hZ2UtaW1hZ2Utc291cmNlLXRzXG5cbiAgICBjb25zdCBsYmwgPSBuZXcgTGFiZWwoKTtcbiAgICBsYmwudGV4dCA9IFwiSW1hZ2UgY3JlYXRlZCB2aWEgZnJvbVJlc291cmNlKCkgbWV0aG9kXCI7XG4gICAgbGJsLmNzcyA9IFwibWFyZ2luLXRvcDogMjA7IG1hcmdpbi1sZWZ0OiAyMDtcIjtcblxuICAgIGNvbnN0IGltYWdlRnJvbUJhc2U2NCA9IG5ldyBJbWFnZSgpO1xuICAgIGNvbnN0IG15SW1hZ2VTb3VyY2UgPSB1c2luZ0Jhc2U2NFN0cmluZ3MoKTtcbiAgICBpbWFnZUZyb21CYXNlNjQuaW1hZ2VTb3VyY2UgPSBteUltYWdlU291cmNlO1xuICAgIGltYWdlRnJvbUJhc2U2NC5oZWlnaHQgPSAxMDA7XG4gICAgaW1hZ2VGcm9tQmFzZTY0LnN0cmV0Y2ggPSBcImFzcGVjdEZpdFwiO1xuXG4gICAgY29uc3QgbGJsMiA9IG5ldyBMYWJlbCgpO1xuICAgIGxibDIudGV4dCA9IFwiSW1hZ2UgY3JlYXRlZCB2aWEgYmFzZTY0IHN0cmluZ1wiO1xuICAgIGxibDIuY3NzID0gXCJtYXJnaW4tdG9wOiAxMjA7IG1hcmdpbi1sZWZ0OiAyMDtcIjtcblxuICAgIHN0YWNrLmFkZENoaWxkKGxibCk7XG4gICAgc3RhY2suYWRkQ2hpbGQoaW1hZ2UpO1xuXG4gICAgc3RhY2suYWRkQ2hpbGQobGJsMik7XG4gICAgc3RhY2suYWRkQ2hpbGQoaW1hZ2VGcm9tQmFzZTY0KTtcbn1cblxuZnVuY3Rpb24gdXNpbmdCYXNlNjRTdHJpbmdzKCkge1xuICAgIC8vID4+IHVzaW5nLWJhc2U2NC1zdHJpbmdzLXRzXG4gICAgLy8gaW1wb3J0IHsgZnJvbUJhc2U2NCwgZnJvbVJlc291cmNlIH0gIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ltYWdlLXNvdXJjZVwiO1xuICAgIGNvbnN0IG15SW1hZ2VTb3VyY2UgPSBmcm9tUmVzb3VyY2UoXCJpY29uXCIpO1xuICAgIGNvbnN0IGltYWdlQXNCYXNlNjRTdHJpbmcgPSBteUltYWdlU291cmNlLnRvQmFzZTY0U3RyaW5nKFwicG5nXCIsIDEwMCk7IC8vIGJhc2U2NCBzdHJpbmc7IGRlZmF1bHQgbWF4IGltYWdlIHF1YWxpdHk7XG4gICAgY29uc3QgYmFzZTY0SW1hZ2VTb3VyY2UgPSBmcm9tQmFzZTY0KGltYWdlQXNCYXNlNjRTdHJpbmcpO1xuICAgIC8vIDw8IHVzaW5nLWJhc2U2NC1zdHJpbmdzLXRzXG5cbiAgICByZXR1cm4gYmFzZTY0SW1hZ2VTb3VyY2U7XG59XG4iXX0=