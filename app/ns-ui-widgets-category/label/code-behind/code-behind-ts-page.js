"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var label_1 = require("tns-core-modules/ui/label");
function onNavigatingTo(args) {
    var page = args.object;
    var container = page.getViewById("container");
    var vm = new observable_1.Observable();
    var myLabel = new label_1.Label();
    myLabel.text = "The quick brown fox jumps over the lazy dog.";
    myLabel.text = "The quick brown fox jumps over the lazy dog.";
    var pageCSS = "Label {background-color: #C6C6C6; color: #bc7474; font-size: 14; padding:10;} ";
    var mySecondLabel = new label_1.Label();
    mySecondLabel.text = "The quick brown fox jumps over the lazy dog.";
    mySecondLabel.className = "title";
    pageCSS += ".title {background-color: #7974bc; color: #54ff5f; font-size: 20; padding:10;} ";
    var myThirdLabel = new label_1.Label();
    myThirdLabel.text = "The quick brown fox jumps over the lazy dog.";
    myThirdLabel.textWrap = true;
    myThirdLabel.id = "testLabel";
    pageCSS += "#testLabel {background-color: #bc7474; color: whitesmoke; font-size: 25; padding:10;}";
    var myFourthlabel = new label_1.Label();
    myFourthlabel.textAlignment = "center";
    myFourthlabel.fontSize = 24;
    var expValue = "NativeScript is Awesome!";
    var bindingOptions = {
        sourceProperty: "sourceProperty",
        targetProperty: "text"
    };
    myFourthlabel.bind(bindingOptions, vm);
    vm.set("sourceProperty", expValue);
    page.css = pageCSS;
    container.addChild(myLabel);
    container.addChild(mySecondLabel);
    container.addChild(myThirdLabel);
    container.addChild(myFourthlabel);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1iZWhpbmQtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZGUtYmVoaW5kLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBMEU7QUFJMUUsbURBQWtEO0FBRWxELHdCQUErQixJQUFlO0lBQzFDLElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBTSxTQUFTLEdBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0QsSUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFHNUIsSUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUM1QixPQUFPLENBQUMsSUFBSSxHQUFHLDhDQUE4QyxDQUFDO0lBRzlELE9BQU8sQ0FBQyxJQUFJLEdBQUcsOENBQThDLENBQUM7SUFDOUQsSUFBSSxPQUFPLEdBQUcsZ0ZBQWdGLENBQUM7SUFFL0YsSUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUNsQyxhQUFhLENBQUMsSUFBSSxHQUFHLDhDQUE4QyxDQUFDO0lBRXBFLGFBQWEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQ2xDLE9BQU8sSUFBSSxpRkFBaUYsQ0FBQztJQUU3RixJQUFNLFlBQVksR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFDO0lBQ2pDLFlBQVksQ0FBQyxJQUFJLEdBQUcsOENBQThDLENBQUM7SUFFbkUsWUFBWSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFFN0IsWUFBWSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDOUIsT0FBTyxJQUFJLHVGQUF1RixDQUFDO0lBR25HLElBQU0sYUFBYSxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFDbEMsYUFBYSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUM7SUFDdkMsYUFBYSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDNUIsSUFBTSxRQUFRLEdBQUcsMEJBQTBCLENBQUM7SUFDNUMsSUFBTSxjQUFjLEdBQUc7UUFDbkIsY0FBYyxFQUFFLGdCQUFnQjtRQUNoQyxjQUFjLEVBQUUsTUFBTTtLQUN6QixDQUFDO0lBQ0YsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVuQyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztJQUduQixTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqQyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUEvQ0Qsd0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhLCBPYnNlcnZhYmxlIH0gIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcbmltcG9ydCB7IFN0YWNrTGF5b3V0IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9zdGFjay1sYXlvdXRcIjtcbi8vID4+IHJlcXVpcmUtbGFiZWwtdHNcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWxcIjtcbi8vIDw8IHJlcXVpcmUtbGFiZWwtdHNcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBjb25zdCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgY29uc3QgY29udGFpbmVyID0gPFN0YWNrTGF5b3V0PnBhZ2UuZ2V0Vmlld0J5SWQoXCJjb250YWluZXJcIik7XG4gICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuXG4gICAgLy8gPj4gbGFiZWwtY29kZS1jcmVhdGUtdHNcbiAgICBjb25zdCBteUxhYmVsID0gbmV3IExhYmVsKCk7XG4gICAgbXlMYWJlbC50ZXh0ID0gXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nLlwiO1xuXG4gICAgLy8gU3R5bGluZyBhIGxhYmVsIHZpYSBjc3MgdHlwZVxuICAgIG15TGFiZWwudGV4dCA9IFwiVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy5cIjtcbiAgICBsZXQgcGFnZUNTUyA9IFwiTGFiZWwge2JhY2tncm91bmQtY29sb3I6ICNDNkM2QzY7IGNvbG9yOiAjYmM3NDc0OyBmb250LXNpemU6IDE0OyBwYWRkaW5nOjEwO30gXCI7XG5cbiAgICBjb25zdCBteVNlY29uZExhYmVsID0gbmV3IExhYmVsKCk7XG4gICAgbXlTZWNvbmRMYWJlbC50ZXh0ID0gXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nLlwiO1xuICAgIC8vIFN0eWxpbmcgYSBsYWJlbCB2aWEgY3NzIGNsYXNzXG4gICAgbXlTZWNvbmRMYWJlbC5jbGFzc05hbWUgPSBcInRpdGxlXCI7XG4gICAgcGFnZUNTUyArPSBcIi50aXRsZSB7YmFja2dyb3VuZC1jb2xvcjogIzc5NzRiYzsgY29sb3I6ICM1NGZmNWY7IGZvbnQtc2l6ZTogMjA7IHBhZGRpbmc6MTA7fSBcIjtcblxuICAgIGNvbnN0IG15VGhpcmRMYWJlbCA9IG5ldyBMYWJlbCgpO1xuICAgIG15VGhpcmRMYWJlbC50ZXh0ID0gXCJUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nLlwiO1xuICAgIC8vIFR1cm5pbmcgb24gdGV4dCB3cmFwcGluZyBmb3IgYSBsYWJlbFxuICAgIG15VGhpcmRMYWJlbC50ZXh0V3JhcCA9IHRydWU7XG4gICAgLy8gU3R5bGluZyBhIGxhYmVsIHZpYSBjc3MgY29udHJvbCBpZGVudGlmaWVyXG4gICAgbXlUaGlyZExhYmVsLmlkID0gXCJ0ZXN0TGFiZWxcIjtcbiAgICBwYWdlQ1NTICs9IFwiI3Rlc3RMYWJlbCB7YmFja2dyb3VuZC1jb2xvcjogI2JjNzQ3NDsgY29sb3I6IHdoaXRlc21va2U7IGZvbnQtc2l6ZTogMjU7IHBhZGRpbmc6MTA7fVwiO1xuXG4gICAgLy8gQmluZGluZyB0ZXh0IHByb3BlcnR5IG9mIGEgbGFiZWwgdG8gYW4gb2JzZXJ2YWJsZSBtb2RlbFxuICAgIGNvbnN0IG15Rm91cnRobGFiZWwgPSBuZXcgTGFiZWwoKTtcbiAgICBteUZvdXJ0aGxhYmVsLnRleHRBbGlnbm1lbnQgPSBcImNlbnRlclwiO1xuICAgIG15Rm91cnRobGFiZWwuZm9udFNpemUgPSAyNDtcbiAgICBjb25zdCBleHBWYWx1ZSA9IFwiTmF0aXZlU2NyaXB0IGlzIEF3ZXNvbWUhXCI7XG4gICAgY29uc3QgYmluZGluZ09wdGlvbnMgPSB7XG4gICAgICAgIHNvdXJjZVByb3BlcnR5OiBcInNvdXJjZVByb3BlcnR5XCIsXG4gICAgICAgIHRhcmdldFByb3BlcnR5OiBcInRleHRcIlxuICAgIH07XG4gICAgbXlGb3VydGhsYWJlbC5iaW5kKGJpbmRpbmdPcHRpb25zLCB2bSk7XG4gICAgdm0uc2V0KFwic291cmNlUHJvcGVydHlcIiwgZXhwVmFsdWUpO1xuICAgIC8vIHNldCB0byB0aGUgcGFnZSBjc3MgcHJvcGVydHkgdGhlIENTUyBzdHlsZSBkZWZpbmVkIGluIHRoZSBwYWdlQ1NTXG4gICAgcGFnZS5jc3MgPSBwYWdlQ1NTO1xuICAgIC8vIDw8IGxhYmVsLWNvZGUtY3JlYXRlLXRzXG5cbiAgICBjb250YWluZXIuYWRkQ2hpbGQobXlMYWJlbCk7XG4gICAgY29udGFpbmVyLmFkZENoaWxkKG15U2Vjb25kTGFiZWwpO1xuICAgIGNvbnRhaW5lci5hZGRDaGlsZChteVRoaXJkTGFiZWwpO1xuICAgIGNvbnRhaW5lci5hZGRDaGlsZChteUZvdXJ0aGxhYmVsKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG4iXX0=