"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var dialogs_1 = require("tns-core-modules/ui/dialogs");
var listArray = new observable_array_1.ObservableArray([
    {
        title: "The Da Vinci Code"
    },
    {
        title: "Harry Potter and the Chamber of Secrets"
    },
    {
        title: "The Alchemist"
    },
    {
        title: "The Godfather"
    },
    {
        title: "Goodnight Moon"
    },
    {
        title: "The Hobbit"
    }
]);
var moreListItems = new observable_array_1.ObservableArray([
    {
        title: "Goosebumps"
    },
    {
        title: "The Lord of the Rings"
    },
    {
        title: "The Ginger Man"
    },
    {
        title: "Harry Potter and the Goblet of Fire"
    },
    {
        title: "Harry Potter and the Order of the Phoenix"
    },
    {
        title: "Harry Potter and the Deathly Hallows"
    }
]);
var loadMore = true;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("listArray", listArray);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onItemTap(args) {
    var index = args.index;
    dialogs_1.alert("ListView item tap " + index).then(function () {
        console.log("Dialog closed!");
    });
}
exports.onItemTap = onItemTap;
function onLoadMoreItems(args) {
    if (loadMore) {
        console.log("ListView -> LoadMoreItemsEvent");
        setTimeout(function () {
            listArray.push(moreListItems.getItem(Math.floor(Math.random() * moreListItems.length)));
            listArray.push(moreListItems.getItem(Math.floor(Math.random() * moreListItems.length)));
            listArray.push(moreListItems.getItem(Math.floor(Math.random() * moreListItems.length)));
            listArray.push(moreListItems.getItem(Math.floor(Math.random() * moreListItems.length)));
            listArray.push(moreListItems.getItem(Math.floor(Math.random() * moreListItems.length)));
        }, 3000);
        loadMore = false;
    }
}
exports.onLoadMoreItems = onLoadMoreItems;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudHMtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE4RDtBQUM5RCwyRUFBeUU7QUFDekUsdURBQW9EO0FBR3BELElBQU0sU0FBUyxHQUFHLElBQUksa0NBQWUsQ0FBQztJQUNsQztRQUNJLEtBQUssRUFBRSxtQkFBbUI7S0FDN0I7SUFDRDtRQUNJLEtBQUssRUFBRSx5Q0FBeUM7S0FDbkQ7SUFDRDtRQUNJLEtBQUssRUFBRSxlQUFlO0tBQ3pCO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsZUFBZTtLQUN6QjtJQUNEO1FBQ0ksS0FBSyxFQUFFLGdCQUFnQjtLQUMxQjtJQUNEO1FBQ0ksS0FBSyxFQUFFLFlBQVk7S0FDdEI7Q0FDSixDQUFDLENBQUM7QUFDSCxJQUFNLGFBQWEsR0FBRyxJQUFJLGtDQUFlLENBQUM7SUFDdEM7UUFDSSxLQUFLLEVBQUUsWUFBWTtLQUN0QjtJQUNEO1FBQ0ksS0FBSyxFQUFFLHVCQUF1QjtLQUNqQztJQUNEO1FBQ0ksS0FBSyxFQUFFLGdCQUFnQjtLQUMxQjtJQUNEO1FBQ0ksS0FBSyxFQUFFLHFDQUFxQztLQUMvQztJQUNEO1FBQ0ksS0FBSyxFQUFFLDJDQUEyQztLQUNyRDtJQUNEO1FBQ0ksS0FBSyxFQUFFLHNDQUFzQztLQUNoRDtDQUNKLENBQUMsQ0FBQztBQUVILElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztBQUNwQix3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBRTVCLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRS9CLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFQRCx3Q0FPQztBQUdELG1CQUEwQixJQUFtQjtJQUN6QyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLGVBQUssQ0FBQyx1QkFBcUIsS0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFMRCw4QkFLQztBQUdELHlCQUFnQyxJQUFtQjtJQUMvQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzlDLFVBQVUsQ0FBQztZQUNQLFNBQVMsQ0FBQyxJQUFJLENBQ1YsYUFBYSxDQUFDLE9BQU8sQ0FDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUNuRCxDQUNKLENBQUM7WUFDRixTQUFTLENBQUMsSUFBSSxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FDbkQsQ0FDSixDQUFDO1lBQ0YsU0FBUyxDQUFDLElBQUksQ0FDVixhQUFhLENBQUMsT0FBTyxDQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQ25ELENBQ0osQ0FBQztZQUNGLFNBQVMsQ0FBQyxJQUFJLENBQ1YsYUFBYSxDQUFDLE9BQU8sQ0FDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUNuRCxDQUNKLENBQUM7WUFDRixTQUFTLENBQUMsSUFBSSxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FDbkQsQ0FDSixDQUFDO1FBQ04sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0FBQ0wsQ0FBQztBQWpDRCwwQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUtYXJyYXlcIjtcbmltcG9ydCB7IGFsZXJ0IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9nc1wiO1xuaW1wb3J0IHsgSXRlbUV2ZW50RGF0YSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2xpc3Qtdmlld1wiO1xuXG5jb25zdCBsaXN0QXJyYXkgPSBuZXcgT2JzZXJ2YWJsZUFycmF5KFtcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIlRoZSBEYSBWaW5jaSBDb2RlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0bGU6IFwiSGFycnkgUG90dGVyIGFuZCB0aGUgQ2hhbWJlciBvZiBTZWNyZXRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0bGU6IFwiVGhlIEFsY2hlbWlzdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIlRoZSBHb2RmYXRoZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXRsZTogXCJHb29kbmlnaHQgTW9vblwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIlRoZSBIb2JiaXRcIlxuICAgIH1cbl0pO1xuY29uc3QgbW9yZUxpc3RJdGVtcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXkoW1xuICAgIHtcbiAgICAgICAgdGl0bGU6IFwiR29vc2VidW1wc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIlRoZSBMb3JkIG9mIHRoZSBSaW5nc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIlRoZSBHaW5nZXIgTWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdGl0bGU6IFwiSGFycnkgUG90dGVyIGFuZCB0aGUgR29ibGV0IG9mIEZpcmVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICB0aXRsZTogXCJIYXJyeSBQb3R0ZXIgYW5kIHRoZSBPcmRlciBvZiB0aGUgUGhvZW5peFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRpdGxlOiBcIkhhcnJ5IFBvdHRlciBhbmQgdGhlIERlYXRobHkgSGFsbG93c1wiXG4gICAgfVxuXSk7XG5cbmxldCBsb2FkTW9yZSA9IHRydWU7XG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJncykge1xuICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdDtcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XG5cbiAgICB2bS5zZXQoXCJsaXN0QXJyYXlcIiwgbGlzdEFycmF5KTtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cbi8vID4+IGxpc3Qtdmlldy1ldmVudHMtdHNcbi8vIFRoZSBldmVudCB3aWxsIGJlIHJhaXNlIHdoZW4gYW4gaXRlbSBpbnNpZGUgdGhlIExpc3RWaWV3IGlzIHRhcHBlZC5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1UYXAoYXJnczogSXRlbUV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJncy5pbmRleDtcbiAgICBhbGVydChgTGlzdFZpZXcgaXRlbSB0YXAgJHtpbmRleH1gKS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEaWFsb2cgY2xvc2VkIVwiKTtcbiAgICB9KTtcbn1cbi8vIFRoZSBldmVudCB3aWxsIGJlIHJhaXNlZCB3aGVuIHRoZSBMaXN0VmlldyBpcyBzY3JvbGxlZCBzbyB0aGF0IHRoZSBsYXN0IGl0ZW0gaXMgdmlzaWJsZS5cbi8vIFRoaXMgZXZlbiBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIGFkZCBhZGRpdGlvbmFsIGRhdGEgaW4gdGhlIExpc3RWaWV3LlxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZE1vcmVJdGVtcyhhcmdzOiBJdGVtRXZlbnREYXRhKSB7XG4gICAgaWYgKGxvYWRNb3JlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTGlzdFZpZXcgLT4gTG9hZE1vcmVJdGVtc0V2ZW50XCIpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGxpc3RBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG1vcmVMaXN0SXRlbXMuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbW9yZUxpc3RJdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxpc3RBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG1vcmVMaXN0SXRlbXMuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbW9yZUxpc3RJdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxpc3RBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG1vcmVMaXN0SXRlbXMuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbW9yZUxpc3RJdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxpc3RBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG1vcmVMaXN0SXRlbXMuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbW9yZUxpc3RJdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxpc3RBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG1vcmVMaXN0SXRlbXMuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbW9yZUxpc3RJdGVtcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSwgMzAwMCk7XG5cbiAgICAgICAgbG9hZE1vcmUgPSBmYWxzZTtcbiAgICB9XG59XG4vLyA8PCBsaXN0LXZpZXctZXZlbnRzLXRzXG4iXX0=