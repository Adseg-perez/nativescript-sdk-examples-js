"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("hourResult", "Hour: ...");
    vm.set("minuteResult", "Minute: ...");
    vm.set("timeResult", "Time: ...");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onPickerLoaded(args) {
    var timePicker = args.object;
    timePicker.hour = 10;
    timePicker.minute = 25;
    timePicker.on("timeChange", function (argstm) {
        console.log("Picked TIME: ", argstm.value);
        console.log("Previous TIME: ", argstm.oldValue);
        var page = argstm.object.page;
        var vm = page.bindingContext;
        vm.set("hourResult", "Hour: " + argstm.object.hour);
        vm.set("minuteResult", "Minute: " + argstm.object.minute);
        vm.set("timeResult", "TIme: " + argstm.object.time);
    });
}
exports.onPickerLoaded = onPickerLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYXNpY3MtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUF5RTtBQUd6RSx3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFQRCx3Q0FPQztBQUdELHdCQUErQixJQUFJO0lBQy9CLElBQU0sVUFBVSxHQUEyQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBR3ZELFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBU3ZCLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQUMsTUFBVztRQUVwQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFHaEQsSUFBTSxJQUFJLEdBQWUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDNUMsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUMvQixFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxXQUFTLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBTSxDQUFDLENBQUM7UUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsYUFBVyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQVEsQ0FBQyxDQUFDO1FBQzFELEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFNLENBQUMsQ0FBQztJQUV4RCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUEzQkQsd0NBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRXZlbnREYXRhIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBUaW1lUGlja2VyIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvdGltZS1waWNrZXJcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlXCI7XG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJncykge1xuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgdm0uc2V0KFwiaG91clJlc3VsdFwiLCBcIkhvdXI6IC4uLlwiKTtcbiAgICB2bS5zZXQoXCJtaW51dGVSZXN1bHRcIiwgXCJNaW51dGU6IC4uLlwiKTtcbiAgICB2bS5zZXQoXCJ0aW1lUmVzdWx0XCIsIFwiVGltZTogLi4uXCIpO1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cblxuLy8gPj4gdGltZS1waWNrZXItY29uZmlndXJlLWNvZGUtdHNcbmV4cG9ydCBmdW5jdGlvbiBvblBpY2tlckxvYWRlZChhcmdzKSB7XG4gICAgY29uc3QgdGltZVBpY2tlcjogVGltZVBpY2tlciA9IDxUaW1lUGlja2VyPmFyZ3Mub2JqZWN0O1xuXG4gICAgLy8gQ29uZmlndXJhYmxlIHByb3BlcnRpZXMgb2YgVGltZVBpY2tlclxuICAgIHRpbWVQaWNrZXIuaG91ciA9IDEwO1xuICAgIHRpbWVQaWNrZXIubWludXRlID0gMjU7XG4gICAgLy8gdGltZVBpY2tlci5taW51dGVJbnRlcnZhbCA9IDU7XG4gICAgLy8gdGltZVBpY2tlci5taW5Ib3VyID0gNztcbiAgICAvLyB0aW1lUGlja2VyLm1heEhvdXIgPSAxMTtcbiAgICAvLyB0aW1lUGlja2VyLm1pbk1pbnV0ZSA9IDEwO1xuICAgIC8vIHRpbWVQaWNrZXIubWF4TWludXRlID0gNDU7XG4gICAgLy8gdGltZVBpY2tlci50aW1lID0gbmV3IERhdGUoKTtcblxuICAgIC8vIGhhbmRsaW5nICd0aW1lQ2hhbmdlJyBldmVudCB2aWEgY29kZSBiZWhpbmRcbiAgICB0aW1lUGlja2VyLm9uKFwidGltZUNoYW5nZVwiLCAoYXJnc3RtOiBhbnkpID0+IHtcbiAgICAgICAgLy8gYXJncyBpcyBvZiB0eXBlIFByb3BlcnR5Q2hhbmdlRGF0YVxuICAgICAgICBjb25zb2xlLmxvZyhcIlBpY2tlZCBUSU1FOiBcIiwgYXJnc3RtLnZhbHVlKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJQcmV2aW91cyBUSU1FOiBcIiwgYXJnc3RtLm9sZFZhbHVlKTtcblxuICAgICAgICAvLyA+PiAoaGlkZSlcbiAgICAgICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3N0bS5vYmplY3QucGFnZTtcbiAgICAgICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xuICAgICAgICB2bS5zZXQoXCJob3VyUmVzdWx0XCIsIGBIb3VyOiAke2FyZ3N0bS5vYmplY3QuaG91cn1gKTtcbiAgICAgICAgdm0uc2V0KFwibWludXRlUmVzdWx0XCIsIGBNaW51dGU6ICR7YXJnc3RtLm9iamVjdC5taW51dGV9YCk7XG4gICAgICAgIHZtLnNldChcInRpbWVSZXN1bHRcIiwgYFRJbWU6ICR7YXJnc3RtLm9iamVjdC50aW1lfWApO1xuICAgICAgICAvLyA8PCAoaGlkZSlcbiAgICB9KTtcbn1cbi8vIDw8IHRpbWUtcGlja2VyLWNvbmZpZ3VyZS1jb2RlLXRzXG4iXX0=