"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var dialogs = require("tns-core-modules/ui/dialogs");
var search_bar_1 = require("tns-core-modules/ui/search-bar");
function onPageLoaded(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var stackLayout = page.getViewById("stackLayoutId");
    vm.set("sbResult", "");
    var searchBar = new search_bar_1.SearchBar();
    searchBar.on(search_bar_1.SearchBar.submitEvent, function (args) {
        console.log("Search for ", args.object.text);
        dialogs.alert("Search for " + args.object.text)
            .then(function () {
            console.log("Dialog closed!");
        });
    });
    searchBar.on(search_bar_1.SearchBar.clearEvent, function () {
        console.log("Clear");
        dialogs.alert("Clear SearchBar text")
            .then(function () {
            console.log("Dialog closed!");
        });
    });
    searchBar.on("textChange", function (args) {
        vm.set("sbResult", args.object.text);
    });
    stackLayout.addChild(searchBar);
    page.bindingContext = vm;
}
exports.onPageLoaded = onPageLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1iZWhpbmQtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZGUtYmVoaW5kLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBdUU7QUFDdkUscURBQXVEO0FBSXZELDZEQUF5RDtBQUd6RCxzQkFBc0IsSUFBSTtJQUN0QixJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QyxJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUM1QixJQUFNLFdBQVcsR0FBOEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUVqRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV2QixJQUFNLFNBQVMsR0FBRyxJQUFJLHNCQUFTLEVBQUUsQ0FBQztJQUVsQyxTQUFTLENBQUMsRUFBRSxDQUFDLHNCQUFTLENBQUMsV0FBVyxFQUFFLFVBQUMsSUFBZTtRQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBYyxJQUFJLENBQUMsTUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQTBCLElBQUksQ0FBQyxNQUFPLENBQUMsSUFBTSxDQUFDO2FBQzNELElBQUksQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEVBQUUsQ0FBQyxzQkFBUyxDQUFDLFVBQVUsRUFBRTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUM7YUFDcEMsSUFBSSxDQUFDO1lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFDLElBQUk7UUFDNUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQWMsSUFBSSxDQUFDLE1BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztJQUdILFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUVELE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlLCBFdmVudERhdGF9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0ICogYXMgZGlhbG9ncyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5pbXBvcnQge1BhZ2V9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcbmltcG9ydCB7U3RhY2tMYXlvdXR9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvc3RhY2stbGF5b3V0XCJcbi8vID4+IHNlYXJjaC1iYXItaW1wb3J0XG5pbXBvcnQge1NlYXJjaEJhcn0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvc2VhcmNoLWJhclwiO1xuLy8gPDwgc2VhcmNoLWJhci1pbXBvcnRcbi8vID4+IGNyZWF0aW5nLXNlYXJjaC1iYXItY29kZS10c1xuZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICBjb25zdCBzdGFja0xheW91dDogU3RhY2tMYXlvdXQgPSA8U3RhY2tMYXlvdXQ+IHBhZ2UuZ2V0Vmlld0J5SWQoXCJzdGFja0xheW91dElkXCIpO1xuXG4gICAgdm0uc2V0KFwic2JSZXN1bHRcIiwgXCJcIik7XG4gICAgLy8gY3JlYXRpbmcgbmV3IFNlYXJjaEJhclxuICAgIGNvbnN0IHNlYXJjaEJhciA9IG5ldyBTZWFyY2hCYXIoKTtcbiAgICAvLyBzZXQgdXAgU2VhcmNoQmFyIHN1Ym1pdCBldmVudFxuICAgIHNlYXJjaEJhci5vbihTZWFyY2hCYXIuc3VibWl0RXZlbnQsIChhcmdzOiBFdmVudERhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTZWFyY2ggZm9yIFwiLCAoPFNlYXJjaEJhcj5hcmdzLm9iamVjdCkudGV4dCk7XG4gICAgICAgIGRpYWxvZ3MuYWxlcnQoYFNlYXJjaCBmb3IgJHsoPFNlYXJjaEJhcj5hcmdzLm9iamVjdCkudGV4dH1gKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBzZXQgdXAgU2VhcmNoQmFyIGNsZWFyIGV2ZW50XG4gICAgc2VhcmNoQmFyLm9uKFNlYXJjaEJhci5jbGVhckV2ZW50LCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYXJcIik7XG4gICAgICAgIGRpYWxvZ3MuYWxlcnQoXCJDbGVhciBTZWFyY2hCYXIgdGV4dFwiKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpYWxvZyBjbG9zZWQhXCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlYXJjaEJhci5vbihcInRleHRDaGFuZ2VcIiwgKGFyZ3MpID0+IHtcbiAgICAgICAgdm0uc2V0KFwic2JSZXN1bHRcIiwgKDxTZWFyY2hCYXI+YXJncy5vYmplY3QpLnRleHQpO1xuICAgIH0pO1xuXG5cbiAgICBzdGFja0xheW91dC5hZGRDaGlsZChzZWFyY2hCYXIpO1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuXG5leHBvcnRzLm9uUGFnZUxvYWRlZCA9IG9uUGFnZUxvYWRlZDtcbi8vIDw8IGNyZWF0aW5nLXNlYXJjaC1iYXItY29kZS10c1xuIl19