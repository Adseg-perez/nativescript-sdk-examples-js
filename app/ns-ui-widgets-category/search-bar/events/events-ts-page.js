"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var arrayItems = [
    { name: "United States" },
    { name: "Bulgaria" },
    { name: "Germany" },
    { name: "Denmark" },
    { name: "India" },
    { name: "Spain" },
    { name: "Italy" }
];
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var myItems = new observable_array_1.ObservableArray(arrayItems);
    vm.set("myItems", myItems);
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onSubmit(args) {
    var searchBar = args.object;
    var searchValue = searchBar.text.toLowerCase();
    var myItems = new observable_array_1.ObservableArray();
    if (searchValue !== "") {
        for (var i = 0; i < arrayItems.length; i++) {
            if (arrayItems[i].name.toLowerCase().indexOf(searchValue) !== -1) {
                myItems.push(arrayItems[i]);
            }
        }
    }
    var page = searchBar.page;
    var vm = page.bindingContext;
    vm.set("myItems", myItems);
}
exports.onSubmit = onSubmit;
function onClear(args) {
    var searchBar = args.object;
    searchBar.text = "";
    searchBar.hint = "Search for a country and press enter";
    var myItems = new observable_array_1.ObservableArray();
    arrayItems.forEach(function (item) {
        myItems.push(item);
    });
    var page = searchBar.page;
    var vm = page.bindingContext;
    vm.set("myItems", myItems);
}
exports.onClear = onClear;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLXRzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudHMtdHMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUE0RDtBQUM1RCwyRUFBdUU7QUFLdkUsSUFBTSxVQUFVLEdBQUc7SUFDZixFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7SUFDekIsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ3BCLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtJQUNuQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7SUFDbkIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0lBQ2pCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtJQUNqQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7Q0FDcEIsQ0FBQztBQUNGLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXRDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBQzVCLElBQU0sT0FBTyxHQUFHLElBQUksa0NBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVoRCxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUUzQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBVEQsd0NBU0M7QUFFRCxrQkFBeUIsSUFBSTtJQUN6QixJQUFNLFNBQVMsR0FBMEIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyRCxJQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRWpELElBQU0sT0FBTyxHQUFHLElBQUksa0NBQWUsRUFBRSxDQUFDO0lBQ3RDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFDRCxJQUFNLElBQUksR0FBZ0IsU0FBUyxDQUFDLElBQUksQ0FBQztJQUN6QyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFmRCw0QkFlQztBQUVELGlCQUF3QixJQUFJO0lBQ3hCLElBQU0sU0FBUyxHQUEwQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JELFNBQVMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsc0NBQXNDLENBQUM7SUFFeEQsSUFBTSxPQUFPLEdBQUcsSUFBSSxrQ0FBZSxFQUFFLENBQUM7SUFDdEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUk7UUFFcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2QixDQUFDLENBQUMsQ0FBQztJQUVILElBQU0sSUFBSSxHQUFnQixTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3pDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQWZELDBCQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHtPYnNlcnZhYmxlQXJyYXl9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZS1hcnJheVwiO1xyXG5pbXBvcnQge1BhZ2V9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcclxuaW1wb3J0IHtTZWFyY2hCYXJ9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3NlYXJjaC1iYXJcIlxyXG4vLyA+PiBjbGVhci1zZWFyY2gtYmFyLXN1Ym1pdC10c1xyXG5cclxuY29uc3QgYXJyYXlJdGVtcyA9IFtcclxuICAgIHsgbmFtZTogXCJVbml0ZWQgU3RhdGVzXCIgfSxcclxuICAgIHsgbmFtZTogXCJCdWxnYXJpYVwiIH0sXHJcbiAgICB7IG5hbWU6IFwiR2VybWFueVwiIH0sXHJcbiAgICB7IG5hbWU6IFwiRGVubWFya1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiSW5kaWFcIiB9LFxyXG4gICAgeyBuYW1lOiBcIlNwYWluXCIgfSxcclxuICAgIHsgbmFtZTogXCJJdGFseVwiIH1cclxuXTtcclxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3Q7XHJcbiAgICAvLyBzZXQgdXAgdGhlIExpc3RWaWV3IGl0ZW1zXHJcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XHJcbiAgICBjb25zdCBteUl0ZW1zID0gbmV3IE9ic2VydmFibGVBcnJheShhcnJheUl0ZW1zKTtcclxuXHJcbiAgICB2bS5zZXQoXCJteUl0ZW1zXCIsIG15SXRlbXMpO1xyXG5cclxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcclxufVxyXG4vLyBzZWFyY2ggZm9yIGNvdW50cnlcclxuZXhwb3J0IGZ1bmN0aW9uIG9uU3VibWl0KGFyZ3MpIHtcclxuICAgIGNvbnN0IHNlYXJjaEJhcjogU2VhcmNoQmFyID0gPFNlYXJjaEJhcj4gYXJncy5vYmplY3Q7XHJcbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IHNlYXJjaEJhci50ZXh0LnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgY29uc3QgbXlJdGVtcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXkoKTtcclxuICAgIGlmIChzZWFyY2hWYWx1ZSAhPT0gXCJcIikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXJyYXlJdGVtc1tpXS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2hWYWx1ZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBteUl0ZW1zLnB1c2goYXJyYXlJdGVtc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IHNlYXJjaEJhci5wYWdlO1xyXG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xyXG4gICAgdm0uc2V0KFwibXlJdGVtc1wiLCBteUl0ZW1zKTtcclxufVxyXG4vLyBjbGVhciBTZWFyY2hCYXIgdGV4dCBhbmQgbG9hZCBMaXN0VmlldyBpbml0aWFsIGRhdGFcclxuZXhwb3J0IGZ1bmN0aW9uIG9uQ2xlYXIoYXJncykge1xyXG4gICAgY29uc3Qgc2VhcmNoQmFyOiBTZWFyY2hCYXIgPSA8U2VhcmNoQmFyPiBhcmdzLm9iamVjdDtcclxuICAgIHNlYXJjaEJhci50ZXh0ID0gXCJcIjtcclxuICAgIHNlYXJjaEJhci5oaW50ID0gXCJTZWFyY2ggZm9yIGEgY291bnRyeSBhbmQgcHJlc3MgZW50ZXJcIjtcclxuXHJcbiAgICBjb25zdCBteUl0ZW1zID0gbmV3IE9ic2VydmFibGVBcnJheSgpO1xyXG4gICAgYXJyYXlJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblxyXG4gICAgICAgIG15SXRlbXMucHVzaChpdGVtKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IHNlYXJjaEJhci5wYWdlO1xyXG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xyXG4gICAgdm0uc2V0KFwibXlJdGVtc1wiLCBteUl0ZW1zKTtcclxufVxyXG4vLyA8PCBjbGVhci1zZWFyY2gtYmFyLXN1Ym1pdC10c1xyXG4iXX0=