"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var dialogs = require("tns-core-modules/ui/dialogs");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("tfHint", "Enter text");
    vm.set("tfText", "");
    vm.set("tfResult", "");
    vm.set("secureState", false);
    vm.set("buttonText", "Enable TextField's secure");
    vm.on(observable_1.Observable.propertyChangeEvent, function (propertyChangeData) {
        if (propertyChangeData.propertyName === "tfText") {
            vm.set("tfResult", propertyChangeData.value);
        }
    });
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function textFieldSecureStateChange(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var secureState = vm.get("secureState");
    vm.set("secureState", !secureState);
    if (secureState) {
        vm.set("buttonText", "Enable TextField's secure");
    }
    else {
        vm.set("buttonText", "Disable TextField's secure");
    }
}
exports.textFieldSecureStateChange = textFieldSecureStateChange;
function showText(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    dialogs.alert("Text: " + vm.get("tfText"))
        .then(function () {
        console.log("Dialog closed!");
    });
}
exports.showText = showText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy10cy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmluZGluZy10cy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQWdGO0FBQ2hGLHFEQUF1RDtBQUd2RCx3QkFBK0IsSUFBSTtJQUMvQixJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QyxJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUM1QixFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMvQixFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QixFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBRWxELEVBQUUsQ0FBQyxFQUFFLENBQUMsdUJBQVUsQ0FBQyxtQkFBbUIsRUFBRSxVQUFDLGtCQUFzQztRQUN6RSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBZkQsd0NBZUM7QUFFRCxvQ0FBMkMsSUFBSTtJQUMzQyxJQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0MsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUUvQixJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNkLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0FBQ0wsQ0FBQztBQVhELGdFQVdDO0FBRUQsa0JBQXlCLElBQUk7SUFDekIsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzNDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFHLENBQUM7U0FDekMsSUFBSSxDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVBELDRCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYnNlcnZhYmxlLCBQcm9wZXJ0eUNoYW5nZURhdGF9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0ICogYXMgZGlhbG9ncyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xuLy8gPj4gdGV4dC1maWVsZC1iaW5kaW5nLWNvZGUtdHNcbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiBhcmdzLm9iamVjdDtcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgdm0uc2V0KFwidGZIaW50XCIsIFwiRW50ZXIgdGV4dFwiKTtcbiAgICB2bS5zZXQoXCJ0ZlRleHRcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwidGZSZXN1bHRcIiwgXCJcIik7XG4gICAgdm0uc2V0KFwic2VjdXJlU3RhdGVcIiwgZmFsc2UpO1xuICAgIHZtLnNldChcImJ1dHRvblRleHRcIiwgXCJFbmFibGUgVGV4dEZpZWxkJ3Mgc2VjdXJlXCIpO1xuICAgIC8vIGhhbmRsaW5nIFRleHRGaWVsZCB0ZXh0IGNoYW5nZVxuICAgIHZtLm9uKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgKHByb3BlcnR5Q2hhbmdlRGF0YTogUHJvcGVydHlDaGFuZ2VEYXRhKSA9PiB7XG4gICAgICAgIGlmIChwcm9wZXJ0eUNoYW5nZURhdGEucHJvcGVydHlOYW1lID09PSBcInRmVGV4dFwiKSB7XG4gICAgICAgICAgICB2bS5zZXQoXCJ0ZlJlc3VsdFwiLCBwcm9wZXJ0eUNoYW5nZURhdGEudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuLy8gY2hhbmdpbmcgVGV4dEZpZWxkIHNlY3VyZSBwcm9wZXJ0eSB2YWx1ZSBvbiBidXR0b24gdGFwXG5leHBvcnQgZnVuY3Rpb24gdGV4dEZpZWxkU2VjdXJlU3RhdGVDaGFuZ2UoYXJncykge1xuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3QucGFnZTtcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XG5cbiAgICBjb25zdCBzZWN1cmVTdGF0ZSA9IHZtLmdldChcInNlY3VyZVN0YXRlXCIpO1xuICAgIHZtLnNldChcInNlY3VyZVN0YXRlXCIsICFzZWN1cmVTdGF0ZSk7XG4gICAgaWYgKHNlY3VyZVN0YXRlKSB7XG4gICAgICAgIHZtLnNldChcImJ1dHRvblRleHRcIiwgXCJFbmFibGUgVGV4dEZpZWxkJ3Mgc2VjdXJlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLnNldChcImJ1dHRvblRleHRcIiwgXCJEaXNhYmxlIFRleHRGaWVsZCdzIHNlY3VyZVwiKTtcbiAgICB9XG59XG4vLyBkaXNwbGF5aW5nIHRoZSBUZXh0RmllbGQgdGV4dCBpbiBhbiBBbGVydCBkaWFsb2dcbmV4cG9ydCBmdW5jdGlvbiBzaG93VGV4dChhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiBhcmdzLm9iamVjdC5wYWdlO1xuICAgIGNvbnN0IHZtID0gcGFnZS5iaW5kaW5nQ29udGV4dDtcbiAgICBkaWFsb2dzLmFsZXJ0KGBUZXh0OiAke3ZtLmdldChcInRmVGV4dFwiKX1gKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEaWFsb2cgY2xvc2VkIVwiKTtcbiAgICB9KTtcbn1cbi8vIDw8IHRleHQtZmllbGQtYmluZGluZy1jb2RlLXRzXG4iXX0=