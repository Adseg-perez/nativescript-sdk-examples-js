"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var platform_1 = require("tns-core-modules/platform");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("webViewSrc", "<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>");
    vm.set("touchResult", "Touch: x: _ y: _");
    vm.set("panResult", "Pan: deltaX: _ deltaY: _");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onWebViewLoaded(webargs) {
    var webview = webargs.object;
    if (platform_1.isAndroid) {
        webview.android.getSettings().setDisplayZoomControls(false);
    }
}
exports.onWebViewLoaded = onWebViewLoaded;
function webViewTouch(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    vm.set("touchResult", "Touch: x: " + args.getX().toFixed(3) + " y: " + args.getY().toFixed(3));
    console.log("Touch: x: " + args.getX().toFixed(3) + " y: " + args.getY().toFixed(3));
}
exports.webViewTouch = webViewTouch;
function webViewPan(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    vm.set("panResult", "Pan: deltaX: " + args.deltaX.toFixed(3) + " deltaY: " + args.deltaY.toFixed(3));
    console.log("Pan: deltaX: " + args.deltaX.toFixed(3) + " deltaY: " + args.deltaY.toFixed(3));
}
exports.webViewPan = webViewPan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdHVyZXMtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdlc3R1cmVzLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrREFBOEQ7QUFLOUQsc0RBQXNEO0FBRXRELHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckMsSUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFDNUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsOEZBQThGLENBQUMsQ0FBQztJQUNySCxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQVBELHdDQU9DO0FBRUQseUJBQWdDLE9BQU87SUFDbkMsSUFBTSxPQUFPLEdBQXFCLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDakQsRUFBRSxDQUFDLENBQUMsb0JBQVMsQ0FBQyxDQUFDLENBQUM7UUFDWixPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7QUFDTCxDQUFDO0FBTEQsMENBS0M7QUFFRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFNLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGVBQWEsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRyxDQUFDLENBQUM7SUFDMUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFhLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO0FBQ3BGLENBQUM7QUFMRCxvQ0FLQztBQUVELG9CQUEyQixJQUFJO0lBQzNCLElBQU0sSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsa0JBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQkFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO0lBQ2hHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQkFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO0FBQzVGLENBQUM7QUFMRCxnQ0FLQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aFxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcbi8vID4+IHdlYnZpZXctaW1wb3J0XG5pbXBvcnQgeyBXZWJWaWV3IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvd2ViLXZpZXdcIjtcbi8vIDw8IHdlYnZpZXctaW1wb3J0XG5pbXBvcnQgeyBpc0FuZHJvaWQgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybVwiO1xuLy8gPj4gd2Vidmlldy1qcy1nZXN0dXJlcy10c1xuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgIHZtLnNldChcIndlYlZpZXdTcmNcIiwgXCI8IURPQ1RZUEUgaHRtbD48aHRtbD48Ym9keT48aDE+TXkgRmlyc3QgSGVhZGluZzwvaDE+PHA+TXkgZmlyc3QgcGFyYWdyYXBoLjwvcD48L2JvZHk+PC9odG1sPlwiKTtcbiAgICB2bS5zZXQoXCJ0b3VjaFJlc3VsdFwiLCBcIlRvdWNoOiB4OiBfIHk6IF9cIik7XG4gICAgdm0uc2V0KFwicGFuUmVzdWx0XCIsIFwiUGFuOiBkZWx0YVg6IF8gZGVsdGFZOiBfXCIpO1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cbi8vIGRpc2FibGluZyB0aGUgV2ViVmlldydzIHpvb20gY29udHJvbChyZXF1aXJlZCBvbmx5IGZvciBBbmRyb2lkKVxuZXhwb3J0IGZ1bmN0aW9uIG9uV2ViVmlld0xvYWRlZCh3ZWJhcmdzKSB7XG4gICAgY29uc3Qgd2VidmlldzogV2ViVmlldyA9IDxXZWJWaWV3PndlYmFyZ3Mub2JqZWN0O1xuICAgIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgICAgd2Vidmlldy5hbmRyb2lkLmdldFNldHRpbmdzKCkuc2V0RGlzcGxheVpvb21Db250cm9scyhmYWxzZSk7XG4gICAgfVxufVxuLy8gc2V0dGluZyB1cCBUb3VjaCBnZXN0dXJlIGNhbGxiYWNrIG1ldGhvZFxuZXhwb3J0IGZ1bmN0aW9uIHdlYlZpZXdUb3VjaChhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0LnBhZ2U7XG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xuICAgIHZtLnNldChcInRvdWNoUmVzdWx0XCIsIGBUb3VjaDogeDogJHthcmdzLmdldFgoKS50b0ZpeGVkKDMpfSB5OiAke2FyZ3MuZ2V0WSgpLnRvRml4ZWQoMyl9YCk7XG4gICAgY29uc29sZS5sb2coYFRvdWNoOiB4OiAke2FyZ3MuZ2V0WCgpLnRvRml4ZWQoMyl9IHk6ICR7YXJncy5nZXRZKCkudG9GaXhlZCgzKX1gKTtcbn1cbi8vIHNldHRpbmcgdXAgUGFuIGdlc3R1cmUgY2FsbGJhY2sgbWV0aG9kXG5leHBvcnQgZnVuY3Rpb24gd2ViVmlld1BhbihhcmdzKSB7XG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0LnBhZ2U7XG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xuICAgIHZtLnNldChcInBhblJlc3VsdFwiLCBgUGFuOiBkZWx0YVg6ICR7YXJncy5kZWx0YVgudG9GaXhlZCgzKX0gZGVsdGFZOiAke2FyZ3MuZGVsdGFZLnRvRml4ZWQoMyl9YCk7XG4gICAgY29uc29sZS5sb2coYFBhbjogZGVsdGFYOiAke2FyZ3MuZGVsdGFYLnRvRml4ZWQoMyl9IGRlbHRhWTogJHthcmdzLmRlbHRhWS50b0ZpeGVkKDMpfWApO1xufVxuLy8gPDwgd2Vidmlldy1qcy1nZXN0dXJlcy10c1xuIl19