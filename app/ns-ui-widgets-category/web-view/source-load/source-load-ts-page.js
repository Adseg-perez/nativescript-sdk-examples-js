"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var web_view_1 = require("tns-core-modules/ui/web-view");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("firstWebViewSRC", "<!DOCTYPE html><html><head><title>MyTitle</title><meta charset='utf-8' /></head><body><span style='color:#0099CC; text-align: center;'>First WebView</span></body></html>");
    vm.set("resultFirstWebView", "");
    vm.set("secondWebViewSRC", "~/ns-ui-widgets-category/web-view/source-load/test.html");
    vm.set("resultSecondWebView", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onFirstWebViewLoaded(webargs) {
    var page = webargs.object.page;
    var vm = page.bindingContext;
    var webview = webargs.object;
    vm.set("resultFirstWebView", "First WebView is still loading...");
    webview.on(web_view_1.WebView.loadFinishedEvent, function (args) {
        var message = "";
        if (!args.error) {
            message = "First WebView finished loading of " + args.url;
        }
        else {
            message = "Error loading first WebView " + args.url + " : " + args.error;
        }
        vm.set("resultFirstWebView", message);
        console.log("First WebView message - ", message);
    });
}
exports.onFirstWebViewLoaded = onFirstWebViewLoaded;
function onSecondWebViewLoaded(webargs) {
    var page = webargs.object.page;
    var vm = page.bindingContext;
    var webview = webargs.object;
    vm.set("resultSecondWebView", "Second WebView is still loading...");
    webview.on(web_view_1.WebView.loadFinishedEvent, function (args) {
        var message = "";
        if (!args.error) {
            message = "Second WebView finished loading of " + args.url;
        }
        else {
            message = "Error loading second WebView  " + args.url + " : " + args.error;
        }
        vm.set("resultSecondWebView", message);
        console.log("Second WebView message - ", message);
    });
}
exports.onSecondWebViewLoaded = onSecondWebViewLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWxvYWQtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvdXJjZS1sb2FkLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrREFBNEQ7QUFDNUQseURBQW9FO0FBRXBFLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBRTVCLEVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsMktBQTJLLENBQUMsQ0FBQztJQUN2TSxFQUFFLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWpDLEVBQUUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUseURBQXlELENBQUMsQ0FBQztJQUN0RixFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFWRCx3Q0FVQztBQUVELDhCQUFxQyxPQUFPO0lBQ3hDLElBQU0sSUFBSSxHQUFnQixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM5QyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLElBQU0sT0FBTyxHQUFzQixPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ2xELEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUVsRSxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFPLENBQUMsaUJBQWlCLEVBQUUsVUFBQyxJQUFtQjtRQUN0RCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNkLE9BQU8sR0FBRyx1Q0FBcUMsSUFBSSxDQUFDLEdBQUssQ0FBQztRQUM5RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixPQUFPLEdBQUcsaUNBQStCLElBQUksQ0FBQyxHQUFHLFdBQU0sSUFBSSxDQUFDLEtBQU8sQ0FBQztRQUN4RSxDQUFDO1FBRUQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWpCRCxvREFpQkM7QUFFRCwrQkFBc0MsT0FBTztJQUN6QyxJQUFNLElBQUksR0FBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDOUMsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixJQUFNLE9BQU8sR0FBcUIsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNqRCxFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLG9DQUFvQyxDQUFDLENBQUM7SUFFcEUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxrQkFBTyxDQUFDLGlCQUFpQixFQUFFLFVBQUMsSUFBbUI7UUFDdEQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDZCxPQUFPLEdBQUcsd0NBQXNDLElBQUksQ0FBQyxHQUFLLENBQUM7UUFDL0QsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osT0FBTyxHQUFHLG1DQUFpQyxJQUFJLENBQUMsR0FBRyxXQUFNLElBQUksQ0FBQyxLQUFPLENBQUM7UUFDMUUsQ0FBQztRQUVELEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFqQkQsc0RBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPj4gd2ViLXZpZXctc3JjLWxvY2FsLWZpbGUtdHNcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHtXZWJWaWV3LCBMb2FkRXZlbnREYXRhfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS93ZWItdmlld1wiO1xyXG5pbXBvcnQge1BhZ2V9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2VcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcclxuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3Q7XHJcbiAgICBjb25zdCB2bSA9IG5ldyBPYnNlcnZhYmxlKCk7XHJcbiAgICAvLyBsb2FkaW5nIHRoZSBXZWJWaWV3IHNvdXJjZSB3aGlsZSBwcm92aWRpbmcgYSBIVE1MIGNvZGVcclxuICAgIHZtLnNldChcImZpcnN0V2ViVmlld1NSQ1wiLCBcIjwhRE9DVFlQRSBodG1sPjxodG1sPjxoZWFkPjx0aXRsZT5NeVRpdGxlPC90aXRsZT48bWV0YSBjaGFyc2V0PSd1dGYtOCcgLz48L2hlYWQ+PGJvZHk+PHNwYW4gc3R5bGU9J2NvbG9yOiMwMDk5Q0M7IHRleHQtYWxpZ246IGNlbnRlcjsnPkZpcnN0IFdlYlZpZXc8L3NwYW4+PC9ib2R5PjwvaHRtbD5cIik7XHJcbiAgICB2bS5zZXQoXCJyZXN1bHRGaXJzdFdlYlZpZXdcIiwgXCJcIik7XHJcbiAgICAvLyBsb2FkaW5nIHRoZSBXZWJWaWV3IHNvdXJjZSBmcm9tIGEgbG9jYWwgZmlsZVxyXG4gICAgdm0uc2V0KFwic2Vjb25kV2ViVmlld1NSQ1wiLCBcIn4vbnMtdWktd2lkZ2V0cy1jYXRlZ29yeS93ZWItdmlldy9zb3VyY2UtbG9hZC90ZXN0Lmh0bWxcIik7XHJcbiAgICB2bS5zZXQoXCJyZXN1bHRTZWNvbmRXZWJWaWV3XCIsIFwiXCIpO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25GaXJzdFdlYlZpZXdMb2FkZWQod2ViYXJncykge1xyXG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiB3ZWJhcmdzLm9iamVjdC5wYWdlO1xyXG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xyXG4gICAgY29uc3Qgd2VidmlldzogV2ViVmlldyA9IDxXZWJWaWV3PiB3ZWJhcmdzLm9iamVjdDtcclxuICAgIHZtLnNldChcInJlc3VsdEZpcnN0V2ViVmlld1wiLCBcIkZpcnN0IFdlYlZpZXcgaXMgc3RpbGwgbG9hZGluZy4uLlwiKTtcclxuICAgIC8vIGhhbmRsaW5nIFdlYlZpZXcgbG9hZCBmaW5pc2ggZXZlbnRcclxuICAgIHdlYnZpZXcub24oV2ViVmlldy5sb2FkRmluaXNoZWRFdmVudCwgKGFyZ3MgOkxvYWRFdmVudERhdGEpID0+IHtcclxuICAgICAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XHJcbiAgICAgICAgaWYgKCFhcmdzLmVycm9yKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgRmlyc3QgV2ViVmlldyBmaW5pc2hlZCBsb2FkaW5nIG9mICR7YXJncy51cmx9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIGxvYWRpbmcgZmlyc3QgV2ViVmlldyAke2FyZ3MudXJsfSA6ICR7YXJncy5lcnJvcn1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uc2V0KFwicmVzdWx0Rmlyc3RXZWJWaWV3XCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRmlyc3QgV2ViVmlldyBtZXNzYWdlIC0gXCIsIG1lc3NhZ2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvblNlY29uZFdlYlZpZXdMb2FkZWQod2ViYXJncykge1xyXG4gICAgY29uc3QgcGFnZTogUGFnZSA9IDxQYWdlPiB3ZWJhcmdzLm9iamVjdC5wYWdlO1xyXG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xyXG4gICAgY29uc3Qgd2VidmlldzogV2ViVmlldyA9IDxXZWJWaWV3PndlYmFyZ3Mub2JqZWN0O1xyXG4gICAgdm0uc2V0KFwicmVzdWx0U2Vjb25kV2ViVmlld1wiLCBcIlNlY29uZCBXZWJWaWV3IGlzIHN0aWxsIGxvYWRpbmcuLi5cIik7XHJcblxyXG4gICAgd2Vidmlldy5vbihXZWJWaWV3LmxvYWRGaW5pc2hlZEV2ZW50LCAoYXJnczogTG9hZEV2ZW50RGF0YSkgPT4ge1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gXCJcIjtcclxuICAgICAgICBpZiAoIWFyZ3MuZXJyb3IpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBTZWNvbmQgV2ViVmlldyBmaW5pc2hlZCBsb2FkaW5nIG9mICR7YXJncy51cmx9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIGxvYWRpbmcgc2Vjb25kIFdlYlZpZXcgICR7YXJncy51cmx9IDogJHthcmdzLmVycm9yfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5zZXQoXCJyZXN1bHRTZWNvbmRXZWJWaWV3XCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2Vjb25kIFdlYlZpZXcgbWVzc2FnZSAtIFwiLCBtZXNzYWdlKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIDw8IHdlYi12aWV3LXNyYy1sb2NhbC1maWxlLXRzXHJcbiJdfQ==