"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var web_view_1 = require("tns-core-modules/ui/web-view");
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("firstWebViewSRC", "<!DOCTYPE html><html><head><title>MyTitle</title><meta charset='utf-8' /></head><body><span style='color:#0099CC; text-align: center;'>First WebView</span></body></html>");
    vm.set("resultFirstWebView", "");
    vm.set("secondWebViewSRC", "~/ns-ui-widgets-category/web-view/source-load/test.html");
    vm.set("resultSecondWebView", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function onFirstWebViewLoaded(webargs) {
    var page = webargs.object.page;
    var vm = page.bindingContext;
    var webview = webargs.object;
    vm.set("resultFirstWebView", "First WebView is still loading...");
    webview.on(web_view_1.WebView.loadFinishedEvent, function (args) {
        var message = "";
        if (!args.error) {
            message = "First WebView finished loading of " + args.url;
        }
        else {
            message = "Error loading first WebView " + args.url + " : " + args.error;
        }
        vm.set("resultFirstWebView", message);
        console.log("First WebView message - ", message);
    });
}
exports.onFirstWebViewLoaded = onFirstWebViewLoaded;
function onSecondWebViewLoaded(webargs) {
    var page = webargs.object.page;
    var vm = page.bindingContext;
    var webview = webargs.object;
    vm.set("resultSecondWebView", "Second WebView is still loading...");
    webview.on(web_view_1.WebView.loadFinishedEvent, function (args) {
        var message = "";
        if (!args.error) {
            message = "Second WebView finished loading of " + args.url;
        }
        else {
            message = "Error loading second WebView  " + args.url + " : " + args.error;
        }
        vm.set("resultSecondWebView", message);
        console.log("Second WebView message - ", message);
    });
}
exports.onSecondWebViewLoaded = onSecondWebViewLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWxvYWQtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvdXJjZS1sb2FkLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwrREFBNEQ7QUFDNUQseURBQW9FO0FBRXBFLHdCQUErQixJQUFJO0lBQy9CLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBRTVCLEVBQUUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsMktBQTJLLENBQUMsQ0FBQztJQUN2TSxFQUFFLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWpDLEVBQUUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUseURBQXlELENBQUMsQ0FBQztJQUN0RixFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFWRCx3Q0FVQztBQUVELDhCQUFxQyxPQUFPO0lBQ3hDLElBQU0sSUFBSSxHQUFnQixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM5QyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLElBQU0sT0FBTyxHQUFzQixPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ2xELEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUVsRSxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFPLENBQUMsaUJBQWlCLEVBQUUsVUFBQyxJQUFtQjtRQUN0RCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNkLE9BQU8sR0FBRyx1Q0FBcUMsSUFBSSxDQUFDLEdBQUssQ0FBQztRQUM5RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixPQUFPLEdBQUcsaUNBQStCLElBQUksQ0FBQyxHQUFHLFdBQU0sSUFBSSxDQUFDLEtBQU8sQ0FBQztRQUN4RSxDQUFDO1FBRUQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWpCRCxvREFpQkM7QUFFRCwrQkFBc0MsT0FBTztJQUN6QyxJQUFNLElBQUksR0FBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDOUMsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixJQUFNLE9BQU8sR0FBcUIsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNqRCxFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLG9DQUFvQyxDQUFDLENBQUM7SUFFcEUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxrQkFBTyxDQUFDLGlCQUFpQixFQUFFLFVBQUMsSUFBbUI7UUFDdEQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDZCxPQUFPLEdBQUcsd0NBQXNDLElBQUksQ0FBQyxHQUFLLENBQUM7UUFDL0QsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osT0FBTyxHQUFHLG1DQUFpQyxJQUFJLENBQUMsR0FBRyxXQUFNLElBQUksQ0FBQyxLQUFPLENBQUM7UUFDMUUsQ0FBQztRQUVELEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFqQkQsc0RBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoXG4vLyA+PiB3ZWItdmlldy1zcmMtbG9jYWwtZmlsZS10c1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7V2ViVmlldywgTG9hZEV2ZW50RGF0YX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvd2ViLXZpZXdcIjtcbmltcG9ydCB7UGFnZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAvLyBsb2FkaW5nIHRoZSBXZWJWaWV3IHNvdXJjZSB3aGlsZSBwcm92aWRpbmcgYSBIVE1MIGNvZGVcbiAgICB2bS5zZXQoXCJmaXJzdFdlYlZpZXdTUkNcIiwgXCI8IURPQ1RZUEUgaHRtbD48aHRtbD48aGVhZD48dGl0bGU+TXlUaXRsZTwvdGl0bGU+PG1ldGEgY2hhcnNldD0ndXRmLTgnIC8+PC9oZWFkPjxib2R5PjxzcGFuIHN0eWxlPSdjb2xvcjojMDA5OUNDOyB0ZXh0LWFsaWduOiBjZW50ZXI7Jz5GaXJzdCBXZWJWaWV3PC9zcGFuPjwvYm9keT48L2h0bWw+XCIpO1xuICAgIHZtLnNldChcInJlc3VsdEZpcnN0V2ViVmlld1wiLCBcIlwiKTtcbiAgICAvLyBsb2FkaW5nIHRoZSBXZWJWaWV3IHNvdXJjZSBmcm9tIGEgbG9jYWwgZmlsZVxuICAgIHZtLnNldChcInNlY29uZFdlYlZpZXdTUkNcIiwgXCJ+L25zLXVpLXdpZGdldHMtY2F0ZWdvcnkvd2ViLXZpZXcvc291cmNlLWxvYWQvdGVzdC5odG1sXCIpO1xuICAgIHZtLnNldChcInJlc3VsdFNlY29uZFdlYlZpZXdcIiwgXCJcIik7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25GaXJzdFdlYlZpZXdMb2FkZWQod2ViYXJncykge1xuICAgIGNvbnN0IHBhZ2U6IFBhZ2UgPSA8UGFnZT4gd2ViYXJncy5vYmplY3QucGFnZTtcbiAgICBjb25zdCB2bSA9IHBhZ2UuYmluZGluZ0NvbnRleHQ7XG4gICAgY29uc3Qgd2VidmlldzogV2ViVmlldyA9IDxXZWJWaWV3PiB3ZWJhcmdzLm9iamVjdDtcbiAgICB2bS5zZXQoXCJyZXN1bHRGaXJzdFdlYlZpZXdcIiwgXCJGaXJzdCBXZWJWaWV3IGlzIHN0aWxsIGxvYWRpbmcuLi5cIik7XG4gICAgLy8gaGFuZGxpbmcgV2ViVmlldyBsb2FkIGZpbmlzaCBldmVudFxuICAgIHdlYnZpZXcub24oV2ViVmlldy5sb2FkRmluaXNoZWRFdmVudCwgKGFyZ3M6IExvYWRFdmVudERhdGEpID0+IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICBpZiAoIWFyZ3MuZXJyb3IpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgRmlyc3QgV2ViVmlldyBmaW5pc2hlZCBsb2FkaW5nIG9mICR7YXJncy51cmx9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgbG9hZGluZyBmaXJzdCBXZWJWaWV3ICR7YXJncy51cmx9IDogJHthcmdzLmVycm9yfWA7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5zZXQoXCJyZXN1bHRGaXJzdFdlYlZpZXdcIiwgbWVzc2FnZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRmlyc3QgV2ViVmlldyBtZXNzYWdlIC0gXCIsIG1lc3NhZ2UpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25TZWNvbmRXZWJWaWV3TG9hZGVkKHdlYmFyZ3MpIHtcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IHdlYmFyZ3Mub2JqZWN0LnBhZ2U7XG4gICAgY29uc3Qgdm0gPSBwYWdlLmJpbmRpbmdDb250ZXh0O1xuICAgIGNvbnN0IHdlYnZpZXc6IFdlYlZpZXcgPSA8V2ViVmlldz53ZWJhcmdzLm9iamVjdDtcbiAgICB2bS5zZXQoXCJyZXN1bHRTZWNvbmRXZWJWaWV3XCIsIFwiU2Vjb25kIFdlYlZpZXcgaXMgc3RpbGwgbG9hZGluZy4uLlwiKTtcblxuICAgIHdlYnZpZXcub24oV2ViVmlldy5sb2FkRmluaXNoZWRFdmVudCwgKGFyZ3M6IExvYWRFdmVudERhdGEpID0+IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICBpZiAoIWFyZ3MuZXJyb3IpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgU2Vjb25kIFdlYlZpZXcgZmluaXNoZWQgbG9hZGluZyBvZiAke2FyZ3MudXJsfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIGxvYWRpbmcgc2Vjb25kIFdlYlZpZXcgICR7YXJncy51cmx9IDogJHthcmdzLmVycm9yfWA7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5zZXQoXCJyZXN1bHRTZWNvbmRXZWJWaWV3XCIsIG1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNlY29uZCBXZWJWaWV3IG1lc3NhZ2UgLSBcIiwgbWVzc2FnZSk7XG4gICAgfSk7XG59XG4vLyA8PCB3ZWItdmlldy1zcmMtbG9jYWwtZmlsZS10c1xuIl19