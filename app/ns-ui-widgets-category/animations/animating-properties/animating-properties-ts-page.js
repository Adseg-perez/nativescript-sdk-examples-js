"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("tns-core-modules/ui/enums");
var animation_1 = require("tns-core-modules/ui/animation");
var color_1 = require("tns-core-modules/color");
var animation;
function animate(args) {
    var button = args.object;
    var page = button.page;
    var view = page.getViewById("lbl");
    view.animate({
        backgroundColor: new color_1.Color("#414b7d"),
        curve: enums_1.AnimationCurve.easeOut,
        delay: 300,
        duration: 3000,
        iterations: 3,
        opacity: 0.8,
        rotate: 360,
        scale: {
            x: 2,
            y: 2
        },
        translate: {
            x: 0,
            y: 200
        }
    }).then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
}
exports.animate = animate;
function animateTarget(args) {
    var view = args.object;
    var animationDefinition = {
        target: view,
        curve: enums_1.AnimationCurve.easeOut,
        duration: 1000,
        scale: {
            x: 0.2,
            y: 0.2
        },
        translate: {
            x: -50,
            y: -50
        }
    };
    animation = new animation_1.Animation([animationDefinition], false);
    animation.play()
        .then(function () {
        console.log("Animation finished");
        console.log("animation.isPlaying: ", animation.isPlaying);
    }).catch(function (e) {
        console.log(e.message);
    });
}
exports.animateTarget = animateTarget;
function cancelAnimation() {
    animation.cancel();
}
exports.cancelAnimation = cancelAnimation;
function demonstrateSimpleAnimations(args) {
    var view = args.object;
    view.backgroundColor = new color_1.Color("red");
    view.animate({
        backgroundColor: new color_1.Color("green"),
        duration: 2000
    });
    view.animate({
        translate: {
            x: 0,
            y: 100
        },
        duration: 1000,
        curve: enums_1.AnimationCurve.easeIn
    });
    view.animate({
        translate: {
            x: 0,
            y: 100
        },
        duration: 1000,
        curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
    });
}
exports.demonstrateSimpleAnimations = demonstrateSimpleAnimations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW5nLXByb3BlcnRpZXMtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFuaW1hdGluZy1wcm9wZXJ0aWVzLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxtREFBMkQ7QUFDM0QsMkRBQStFO0FBQy9FLGdEQUErQztBQUcvQyxJQUFJLFNBQW9CLENBQUM7QUFFekIsaUJBQXdCLElBQUk7SUFDeEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLElBQUksR0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3hCLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFHekMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNULGVBQWUsRUFBRSxJQUFJLGFBQUssQ0FBQyxTQUFTLENBQUM7UUFDckMsS0FBSyxFQUFFLHNCQUFjLENBQUMsT0FBTztRQUM3QixLQUFLLEVBQUUsR0FBRztRQUNWLFFBQVEsRUFBRSxJQUFJO1FBQ2QsVUFBVSxFQUFFLENBQUM7UUFDYixPQUFPLEVBQUUsR0FBRztRQUNaLE1BQU0sRUFBRSxHQUFHO1FBQ1gsS0FBSyxFQUFFO1lBQ0gsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztTQUNQO1FBQ0QsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsR0FBRztTQUNUO0tBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDO0FBNUJELDBCQTRCQztBQUVELHVCQUE4QixJQUFJO0lBRTlCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFekIsSUFBTSxtQkFBbUIsR0FBd0I7UUFDN0MsTUFBTSxFQUFFLElBQUk7UUFDWixLQUFLLEVBQUUsc0JBQWMsQ0FBQyxPQUFPO1FBQzdCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsS0FBSyxFQUFFO1lBQ0gsQ0FBQyxFQUFFLEdBQUc7WUFDTixDQUFDLEVBQUUsR0FBRztTQUNUO1FBQ0QsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNOLENBQUMsRUFBRSxDQUFDLEVBQUU7U0FDVDtLQUNKLENBQUM7SUFFRixTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLENBQUMsbUJBQW1CLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RCxTQUFTLENBQUMsSUFBSSxFQUFFO1NBQ1gsSUFBSSxDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUM7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUVYLENBQUM7QUEzQkQsc0NBMkJDO0FBRUQ7SUFFSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFdkIsQ0FBQztBQUpELDBDQUlDO0FBRUQscUNBQTRDLElBQUk7SUFDNUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUV6QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksYUFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDVCxlQUFlLEVBQUUsSUFBSSxhQUFLLENBQUMsT0FBTyxDQUFDO1FBQ25DLFFBQVEsRUFBRSxJQUFJO0tBQ2pCLENBQUMsQ0FBQztJQUlILElBQUksQ0FBQyxPQUFPLENBQUM7UUFDVCxTQUFTLEVBQUU7WUFDUCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxHQUFHO1NBQ1Q7UUFDRCxRQUFRLEVBQUUsSUFBSTtRQUNkLEtBQUssRUFBRSxzQkFBYyxDQUFDLE1BQU07S0FDL0IsQ0FBQyxDQUFDO0lBSUgsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNULFNBQVMsRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLEdBQUc7U0FDVDtRQUNELFFBQVEsRUFBRSxJQUFJO1FBQ2QsS0FBSyxFQUFFLHNCQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUN0RCxDQUFDLENBQUM7QUFFUCxDQUFDO0FBL0JELGtFQStCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vID4+IGFuaW1hdGlvbi1jdXJ2ZS1pbXBvcnRzLXRzXG4vLyBBbmltYXRpb25DdXJ2ZSBlbnVtZXJhdGlvbjogZWFzZSwgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQsIGxpbmVhciwgc3ByaW5nXG5pbXBvcnQgeyBBbmltYXRpb25DdXJ2ZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2VudW1zXCI7XG5pbXBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbkRlZmluaXRpb24gfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9hbmltYXRpb25cIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvY29sb3JcIjtcbi8vIDw8IGFuaW1hdGlvbi1jdXJ2ZS1pbXBvcnRzLXRzXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3XCI7XG5sZXQgYW5pbWF0aW9uOiBBbmltYXRpb247XG5cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRlKGFyZ3MpIHtcbiAgICBsZXQgYnV0dG9uID0gYXJncy5vYmplY3Q7XG4gICAgbGV0IHBhZ2UgPSAgYnV0dG9uLnBhZ2U7XG4gICAgbGV0IHZpZXcgPSA8Vmlldz5wYWdlLmdldFZpZXdCeUlkKFwibGJsXCIpO1xuXG4gICAgLy8gPj4gYW5pbWF0aW9uLXByb3BlcnRpZXMtdHNcbiAgICB2aWV3LmFuaW1hdGUoe1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG5ldyBDb2xvcihcIiM0MTRiN2RcIiksXG4gICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlT3V0LFxuICAgICAgICBkZWxheTogMzAwLFxuICAgICAgICBkdXJhdGlvbjogMzAwMCxcbiAgICAgICAgaXRlcmF0aW9uczogMyxcbiAgICAgICAgb3BhY2l0eTogMC44LFxuICAgICAgICByb3RhdGU6IDM2MCxcbiAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgIHg6IDIsXG4gICAgICAgICAgICB5OiAyXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDIwMFxuICAgICAgICB9XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQW5pbWF0aW9uIGZpbmlzaGVkXCIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgfSk7XG4gICAgLy8gPDwgYW5pbWF0aW9uLXByb3BlcnRpZXMtdHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuaW1hdGVUYXJnZXQoYXJncykge1xuICAgIC8vID4+IGFuaW1hdGlvbi10YXJnZXQtdHNcbiAgICBjb25zdCB2aWV3ID0gYXJncy5vYmplY3Q7XG5cbiAgICBjb25zdCBhbmltYXRpb25EZWZpbml0aW9uOiBBbmltYXRpb25EZWZpbml0aW9uID0ge1xuICAgICAgICB0YXJnZXQ6IHZpZXcsIC8vIHByb3ZpZGUgdGhlIHZpZXcgdG8gYW5pbWF0ZVxuICAgICAgICBjdXJ2ZTogQW5pbWF0aW9uQ3VydmUuZWFzZU91dCxcbiAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICB4OiAwLjIsXG4gICAgICAgICAgICB5OiAwLjJcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgICB4OiAtNTAsXG4gICAgICAgICAgICB5OiAtNTBcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKFthbmltYXRpb25EZWZpbml0aW9uXSwgZmFsc2UpO1xuICAgIGFuaW1hdGlvbi5wbGF5KClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBbmltYXRpb24gZmluaXNoZWRcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFuaW1hdGlvbi5pc1BsYXlpbmc6IFwiLCBhbmltYXRpb24uaXNQbGF5aW5nKTtcbiAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIC8vIDw8IGFuaW1hdGlvbi10YXJnZXQtdHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbEFuaW1hdGlvbigpIHtcbiAgICAvLyA+PiBhbmltYXRpb24tY2FuY2VsLXRzXG4gICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgIC8vIDw8IGFuaW1hdGlvbi1jYW5jZWwtdHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbW9uc3RyYXRlU2ltcGxlQW5pbWF0aW9ucyhhcmdzKSB7XG4gICAgY29uc3QgdmlldyA9IGFyZ3Mub2JqZWN0O1xuICAgIC8vID4+IGFuaW1hdGluZy1iYWNrZ3JvdW5kLWNvbG9yLXRzXG4gICAgdmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoXCJyZWRcIik7XG4gICAgdmlldy5hbmltYXRlKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBuZXcgQ29sb3IoXCJncmVlblwiKSxcbiAgICAgICAgZHVyYXRpb246IDIwMDBcbiAgICB9KTtcbiAgICAvLyA8PCBhbmltYXRpbmctYmFja2dyb3VuZC1jb2xvci10c1xuXG4gICAgLy8gPj4gdXNpbmctYW5pbWF0aW9uLWN1cnZlLWVudW0tdHNcbiAgICB2aWV3LmFuaW1hdGUoe1xuICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAxMDBcbiAgICAgICAgfSxcbiAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlSW5cbiAgICB9KTtcbiAgICAvLyA8PCB1c2luZy1hbmltYXRpb24tY3VydmUtZW51bS10c1xuXG4gICAgLy8gPj4gY3JlYXRpbmctY3ViaWMtYmV6aWVyLXRzXG4gICAgdmlldy5hbmltYXRlKHtcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMTAwXG4gICAgICAgIH0sXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICBjdXJ2ZTogQW5pbWF0aW9uQ3VydmUuY3ViaWNCZXppZXIoMC4xLCAwLjEsIDAuMSwgMSlcbiAgICB9KTtcbiAgICAvLyA8PCBjcmVhdGluZy1jdWJpYy1iZXppZXItdHNcbn1cbiJdfQ==