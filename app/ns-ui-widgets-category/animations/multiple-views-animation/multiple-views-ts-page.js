"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("tns-core-modules/ui/animation");
var view1, view2, view3, view4;
function onLoaded(args) {
    var page = args.object;
    view1 = page.getViewById("view1");
    view2 = page.getViewById("view2");
    view3 = page.getViewById("view3");
    view4 = page.getViewById("view4");
}
exports.onLoaded = onLoaded;
function animate() {
    var definitions = [];
    var definition1 = {
        target: view1,
        translate: {
            x: 200,
            y: 0
        },
        duration: 1000
    };
    definitions.push(definition1);
    var definition2 = {
        target: view2,
        translate: {
            x: 0,
            y: 200
        },
        duration: 1000
    };
    definitions.push(definition2);
    var definition3 = {
        target: view3,
        translate: {
            x: -200,
            y: 0
        },
        duration: 1000
    };
    definitions.push(definition3);
    var definition4 = {
        target: view4,
        translate: {
            x: 0,
            y: -200
        },
        duration: 1000
    };
    definitions.push(definition4);
    var animationSet = new animation_1.Animation(definitions);
    animationSet.play()
        .then(function () {
        console.log("Animation finished");
    }).catch(function (e) {
        console.log(e.message);
    });
}
exports.animate = animate;
function reset() {
    view1.translateX = 0;
    view1.translateY = 0;
    view2.translateX = 0;
    view2.translateY = 0;
    view3.translateX = 0;
    view3.translateY = 0;
    view4.translateX = 0;
    view4.translateY = 0;
}
exports.reset = reset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwbGUtdmlld3MtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm11bHRpcGxlLXZpZXdzLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSwyREFJdUM7QUFFdkMsSUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7QUFFL0Isa0JBQXlCLElBQUk7SUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUV6QixLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBUEQsNEJBT0M7QUFFRDtJQUVJLElBQU0sV0FBVyxHQUErQixFQUFFLENBQUM7SUFFbkQsSUFBTSxXQUFXLEdBQXdCO1FBQ3JDLE1BQU0sRUFBRSxLQUFLO1FBQ2IsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLEdBQUc7WUFDTixDQUFDLEVBQUUsQ0FBQztTQUNQO1FBQ0QsUUFBUSxFQUFFLElBQUk7S0FDakIsQ0FBQztJQUNGLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUIsSUFBTSxXQUFXLEdBQXdCO1FBQ3JDLE1BQU0sRUFBRSxLQUFLO1FBQ2IsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsR0FBRztTQUNUO1FBQ0QsUUFBUSxFQUFFLElBQUk7S0FDakIsQ0FBQztJQUNGLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUIsSUFBTSxXQUFXLEdBQXdCO1FBQ3JDLE1BQU0sRUFBRSxLQUFLO1FBQ2IsU0FBUyxFQUFFO1lBQ1AsQ0FBQyxFQUFFLENBQUMsR0FBRztZQUNQLENBQUMsRUFBRSxDQUFDO1NBQ1A7UUFDRCxRQUFRLEVBQUUsSUFBSTtLQUNqQixDQUFDO0lBQ0YsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUU5QixJQUFNLFdBQVcsR0FBd0I7UUFDckMsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUU7WUFDUCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDLEdBQUc7U0FDVjtRQUNELFFBQVEsRUFBRSxJQUFJO0tBQ2pCLENBQUM7SUFDRixXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRTlCLElBQU0sWUFBWSxHQUFHLElBQUkscUJBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVoRCxZQUFZLENBQUMsSUFBSSxFQUFFO1NBQ2QsSUFBSSxDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUM7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUVYLENBQUM7QUFyREQsMEJBcURDO0FBRUQ7SUFDSSxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBVEQsc0JBU0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA+PiBhbmltYXRpb24taW1wb3J0LXRzXG4vLyBNYWluIEFuaW1hdGlvbiBjbGFzc1xuLy8gQUxMIGFuaW1hdGluZyBwcm9wZXJ0aWVzIGF0IGh0dHBzOi8vZG9jcy5uYXRpdmVzY3JpcHQub3JnL2FwaS1yZWZlcmVuY2UvaW50ZXJmYWNlcy9fdWlfYW5pbWF0aW9uXy5hbmltYXRpb25kZWZpbml0aW9uXG5pbXBvcnQge1xuICAgIEFuaW1hdGlvbixcbiAgICBBbmltYXRpb25EZWZpbml0aW9uLFxuICAgIFBhaXIgLy8gUGFpcjogRGVmaW5lcyBhIHBhaXIgb2YgdmFsdWVzIChob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCkgZm9yIHRyYW5zbGF0ZSBhbmQgc2NhbGUgYW5pbWF0aW9ucy5cbn0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvYW5pbWF0aW9uXCI7XG4vLyA8PCBhbmltYXRpb24taW1wb3J0LXRzXG5sZXQgdmlldzEsIHZpZXcyLCB2aWV3MywgdmlldzQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuXG4gICAgdmlldzEgPSBwYWdlLmdldFZpZXdCeUlkKFwidmlldzFcIik7XG4gICAgdmlldzIgPSBwYWdlLmdldFZpZXdCeUlkKFwidmlldzJcIik7XG4gICAgdmlldzMgPSBwYWdlLmdldFZpZXdCeUlkKFwidmlldzNcIik7XG4gICAgdmlldzQgPSBwYWdlLmdldFZpZXdCeUlkKFwidmlldzRcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIC8vID4+IGFuaW1hdGUtbXVsdGlwbGUtdmlld3MtdHNcbiAgICBjb25zdCBkZWZpbml0aW9uczogQXJyYXk8QW5pbWF0aW9uRGVmaW5pdGlvbj4gPSBbXTtcblxuICAgIGNvbnN0IGRlZmluaXRpb24xOiBBbmltYXRpb25EZWZpbml0aW9uID0ge1xuICAgICAgICB0YXJnZXQ6IHZpZXcxLFxuICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgIHg6IDIwMCxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZHVyYXRpb246IDEwMDBcbiAgICB9O1xuICAgIGRlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbjEpO1xuXG4gICAgY29uc3QgZGVmaW5pdGlvbjI6IEFuaW1hdGlvbkRlZmluaXRpb24gPSB7XG4gICAgICAgIHRhcmdldDogdmlldzIsXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDIwMFxuICAgICAgICB9LFxuICAgICAgICBkdXJhdGlvbjogMTAwMFxuICAgIH07XG4gICAgZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uMik7XG5cbiAgICBjb25zdCBkZWZpbml0aW9uMzogQW5pbWF0aW9uRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgdGFyZ2V0OiB2aWV3MyxcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgICB4OiAtMjAwLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICB9LFxuICAgICAgICBkdXJhdGlvbjogMTAwMFxuICAgIH07XG4gICAgZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uMyk7XG5cbiAgICBjb25zdCBkZWZpbml0aW9uNDogQW5pbWF0aW9uRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgdGFyZ2V0OiB2aWV3NCxcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogLTIwMFxuICAgICAgICB9LFxuICAgICAgICBkdXJhdGlvbjogMTAwMFxuICAgIH07XG4gICAgZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uNCk7XG5cbiAgICBjb25zdCBhbmltYXRpb25TZXQgPSBuZXcgQW5pbWF0aW9uKGRlZmluaXRpb25zKTtcblxuICAgIGFuaW1hdGlvblNldC5wbGF5KClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBbmltYXRpb24gZmluaXNoZWRcIik7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICAvLyA8PCBhbmltYXRlLW11bHRpcGxlLXZpZXdzLXRzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2aWV3MS50cmFuc2xhdGVYID0gMDtcbiAgICB2aWV3MS50cmFuc2xhdGVZID0gMDtcbiAgICB2aWV3Mi50cmFuc2xhdGVYID0gMDtcbiAgICB2aWV3Mi50cmFuc2xhdGVZID0gMDtcbiAgICB2aWV3My50cmFuc2xhdGVYID0gMDtcbiAgICB2aWV3My50cmFuc2xhdGVZID0gMDtcbiAgICB2aWV3NC50cmFuc2xhdGVYID0gMDtcbiAgICB2aWV3NC50cmFuc2xhdGVZID0gMDtcbn1cbiJdfQ==