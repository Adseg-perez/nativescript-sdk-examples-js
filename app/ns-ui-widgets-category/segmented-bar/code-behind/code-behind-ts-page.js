"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var segmented_bar_1 = require("tns-core-modules/ui/segmented-bar");
function onPageLoaded(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var stackLayout = page.getViewById("stackLayoutId");
    vm.set("sbResult", 0);
    var options = {
        sourceProperty: "sbindex",
        targetProperty: "selectedIndex"
    };
    var segmentedBar = new segmented_bar_1.SegmentedBar();
    var items = [];
    var item1 = new segmented_bar_1.SegmentedBarItem();
    item1.title = "Item1";
    items.push(item1);
    var item2 = new segmented_bar_1.SegmentedBarItem();
    item2.title = "Item2";
    items.push(item2);
    var item3 = new segmented_bar_1.SegmentedBarItem();
    item3.title = "Item3";
    items.push(item3);
    segmentedBar.items = items;
    segmentedBar.bind(options, vm);
    vm.set("sbindex", 0);
    segmentedBar.on("selectedIndexChange", function (args) {
        vm.set("sbResult", args.object.selectedIndex);
    });
    stackLayout.insertChild(segmentedBar, 0);
    page.bindingContext = vm;
}
exports.onPageLoaded = onPageLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1iZWhpbmQtdHMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZGUtYmVoaW5kLXRzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBNEQ7QUFJNUQsbUVBQWdIO0FBR2hILHNCQUE2QixJQUFJO0lBQzdCLElBQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQU0sRUFBRSxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0lBQzVCLElBQU0sV0FBVyxHQUE4QixJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRWpGLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQU0sT0FBTyxHQUFHO1FBQ1osY0FBYyxFQUFFLFNBQVM7UUFDekIsY0FBYyxFQUFFLGVBQWU7S0FDbEMsQ0FBQztJQUNGLElBQU0sWUFBWSxHQUFHLElBQUksNEJBQVksRUFBRSxDQUFDO0lBQ3hDLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixJQUFNLEtBQUssR0FBRyxJQUFJLGdDQUFnQixFQUFFLENBQUM7SUFDckMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7SUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQixJQUFNLEtBQUssR0FBRyxJQUFJLGdDQUFnQixFQUFFLENBQUM7SUFDckMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7SUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQixJQUFNLEtBQUssR0FBRyxJQUFJLGdDQUFnQixFQUFFLENBQUM7SUFDckMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7SUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQixZQUFZLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUUzQixZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUvQixFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVyQixZQUFZLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLFVBQUMsSUFBbUM7UUFDdkUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQWlCLElBQUksQ0FBQyxNQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV6QyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBbkNELG9DQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7UGFnZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvcGFnZVwiO1xyXG5pbXBvcnQge1N0YWNrTGF5b3V0fSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL3N0YWNrLWxheW91dFwiXHJcbi8vID4+IHNlZ21lbnRlZC1iYXItaW1wb3J0XHJcbmltcG9ydCB7U2VnbWVudGVkQmFyLCBTZWdtZW50ZWRCYXJJdGVtLCBTZWxlY3RlZEluZGV4Q2hhbmdlZEV2ZW50RGF0YX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvc2VnbWVudGVkLWJhclwiO1xyXG4vLyA8PCBzZWdtZW50ZWQtYmFyLWltcG9ydFxyXG4vLyA+PiBjcmVhdGluZy1zZWdtZW50ZWQtYmFyLWNvZGUtdHNcclxuZXhwb3J0IGZ1bmN0aW9uIG9uUGFnZUxvYWRlZChhcmdzKSB7XHJcbiAgICBjb25zdCBwYWdlOiBQYWdlID0gPFBhZ2U+IGFyZ3Mub2JqZWN0O1xyXG4gICAgY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG4gICAgY29uc3Qgc3RhY2tMYXlvdXQ6IFN0YWNrTGF5b3V0ID0gPFN0YWNrTGF5b3V0PiBwYWdlLmdldFZpZXdCeUlkKFwic3RhY2tMYXlvdXRJZFwiKTtcclxuXHJcbiAgICB2bS5zZXQoXCJzYlJlc3VsdFwiLCAwKTtcclxuICAgIC8vIGNyZWF0aW5nIG5ldyBTZWdtZW50ZWRCYXIgYW5kIGJpbmRpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgc291cmNlUHJvcGVydHk6IFwic2JpbmRleFwiLFxyXG4gICAgICAgIHRhcmdldFByb3BlcnR5OiBcInNlbGVjdGVkSW5kZXhcIlxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNlZ21lbnRlZEJhciA9IG5ldyBTZWdtZW50ZWRCYXIoKTtcclxuICAgIGNvbnN0IGl0ZW1zID0gW107XHJcbiAgICBjb25zdCBpdGVtMSA9IG5ldyBTZWdtZW50ZWRCYXJJdGVtKCk7XHJcbiAgICBpdGVtMS50aXRsZSA9IFwiSXRlbTFcIjtcclxuICAgIGl0ZW1zLnB1c2goaXRlbTEpO1xyXG4gICAgY29uc3QgaXRlbTIgPSBuZXcgU2VnbWVudGVkQmFySXRlbSgpO1xyXG4gICAgaXRlbTIudGl0bGUgPSBcIkl0ZW0yXCI7XHJcbiAgICBpdGVtcy5wdXNoKGl0ZW0yKTtcclxuICAgIGNvbnN0IGl0ZW0zID0gbmV3IFNlZ21lbnRlZEJhckl0ZW0oKTtcclxuICAgIGl0ZW0zLnRpdGxlID0gXCJJdGVtM1wiO1xyXG4gICAgaXRlbXMucHVzaChpdGVtMyk7XHJcbiAgICBzZWdtZW50ZWRCYXIuaXRlbXMgPSBpdGVtcztcclxuXHJcbiAgICBzZWdtZW50ZWRCYXIuYmluZChvcHRpb25zLCB2bSk7XHJcbiAgICAvLyBzZXR0aW5nIFNlZ21lbnRlZEJhciBzZWxlY3RlZCBpbmRleCB0byAwXHJcbiAgICB2bS5zZXQoXCJzYmluZGV4XCIsIDApO1xyXG5cclxuICAgIHNlZ21lbnRlZEJhci5vbihcInNlbGVjdGVkSW5kZXhDaGFuZ2VcIiwgKGFyZ3M6IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhKSA9PiB7XHJcbiAgICAgICAgdm0uc2V0KFwic2JSZXN1bHRcIiwgKDxTZWdtZW50ZWRCYXI+YXJncy5vYmplY3QpLnNlbGVjdGVkSW5kZXgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3RhY2tMYXlvdXQuaW5zZXJ0Q2hpbGQoc2VnbWVudGVkQmFyLCAwKTtcclxuXHJcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XHJcbn1cclxuLy8gPDwgY3JlYXRpbmctc2VnbWVudGVkLWJhci1jb2RlLXRzXHJcbiJdfQ==